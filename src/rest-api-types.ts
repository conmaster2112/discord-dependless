
import { RequestJson } from "./request";
import { RequestMethod } from "./enums";
export type DiscordRestAPIPath = `/applications/@me` |
`/applications/${DiscordSnowflakeType}` |
`/applications/${DiscordSnowflakeType}/activity-instances/${string}` |
`/applications/${DiscordSnowflakeType}/attachment` |
`/applications/${DiscordSnowflakeType}/commands` |
`/applications/${DiscordSnowflakeType}/commands/${DiscordSnowflakeType}` |
`/applications/${DiscordSnowflakeType}/emojis` |
`/applications/${DiscordSnowflakeType}/emojis/${DiscordSnowflakeType}` |
`/applications/${DiscordSnowflakeType}/entitlements` |
`/applications/${DiscordSnowflakeType}/entitlements/${DiscordSnowflakeType}` |
`/applications/${DiscordSnowflakeType}/entitlements/${DiscordSnowflakeType}/consume` |
`/applications/${DiscordSnowflakeType}/guilds/${DiscordSnowflakeType}/commands` |
`/applications/${DiscordSnowflakeType}/guilds/${DiscordSnowflakeType}/commands/permissions` |
`/applications/${DiscordSnowflakeType}/guilds/${DiscordSnowflakeType}/commands/${DiscordSnowflakeType}` |
`/applications/${DiscordSnowflakeType}/guilds/${DiscordSnowflakeType}/commands/${DiscordSnowflakeType}/permissions` |
`/applications/${DiscordSnowflakeType}/role-connections/metadata` |
`/channels/${DiscordSnowflakeType}` |
`/channels/${DiscordSnowflakeType}/followers` |
`/channels/${DiscordSnowflakeType}/invites` |
`/channels/${DiscordSnowflakeType}/messages` |
`/channels/${DiscordSnowflakeType}/messages/bulk-delete` |
`/channels/${DiscordSnowflakeType}/messages/${DiscordSnowflakeType}` |
`/channels/${DiscordSnowflakeType}/messages/${DiscordSnowflakeType}/crosspost` |
`/channels/${DiscordSnowflakeType}/messages/${DiscordSnowflakeType}/reactions` |
`/channels/${DiscordSnowflakeType}/messages/${DiscordSnowflakeType}/reactions/${string}` |
`/channels/${DiscordSnowflakeType}/messages/${DiscordSnowflakeType}/reactions/${string}/@me` |
`/channels/${DiscordSnowflakeType}/messages/${DiscordSnowflakeType}/reactions/${string}/${DiscordSnowflakeType}` |
`/channels/${DiscordSnowflakeType}/messages/${DiscordSnowflakeType}/threads` |
`/channels/${DiscordSnowflakeType}/permissions/${DiscordSnowflakeType}` |
`/channels/${DiscordSnowflakeType}/pins` |
`/channels/${DiscordSnowflakeType}/pins/${DiscordSnowflakeType}` |
`/channels/${DiscordSnowflakeType}/polls/${DiscordSnowflakeType}/answers/${number}` |
`/channels/${DiscordSnowflakeType}/polls/${DiscordSnowflakeType}/expire` |
`/channels/${DiscordSnowflakeType}/recipients/${DiscordSnowflakeType}` |
`/channels/${DiscordSnowflakeType}/send-soundboard-sound` |
`/channels/${DiscordSnowflakeType}/thread-members` |
`/channels/${DiscordSnowflakeType}/thread-members/@me` |
`/channels/${DiscordSnowflakeType}/thread-members/${DiscordSnowflakeType}` |
`/channels/${DiscordSnowflakeType}/threads` |
`/channels/${DiscordSnowflakeType}/threads/archived/private` |
`/channels/${DiscordSnowflakeType}/threads/archived/public` |
`/channels/${DiscordSnowflakeType}/threads/search` |
`/channels/${DiscordSnowflakeType}/typing` |
`/channels/${DiscordSnowflakeType}/users/@me/threads/archived/private` |
`/channels/${DiscordSnowflakeType}/webhooks` |
`/gateway` |
`/gateway/bot` |
`/guilds` |
`/guilds/templates/${string}` |
`/guilds/${DiscordSnowflakeType}` |
`/guilds/${DiscordSnowflakeType}/audit-logs` |
`/guilds/${DiscordSnowflakeType}/auto-moderation/rules` |
`/guilds/${DiscordSnowflakeType}/auto-moderation/rules/${DiscordSnowflakeType}` |
`/guilds/${DiscordSnowflakeType}/bans` |
`/guilds/${DiscordSnowflakeType}/bans/${DiscordSnowflakeType}` |
`/guilds/${DiscordSnowflakeType}/bulk-ban` |
`/guilds/${DiscordSnowflakeType}/channels` |
`/guilds/${DiscordSnowflakeType}/emojis` |
`/guilds/${DiscordSnowflakeType}/emojis/${DiscordSnowflakeType}` |
`/guilds/${DiscordSnowflakeType}/integrations` |
`/guilds/${DiscordSnowflakeType}/integrations/${DiscordSnowflakeType}` |
`/guilds/${DiscordSnowflakeType}/invites` |
`/guilds/${DiscordSnowflakeType}/members` |
`/guilds/${DiscordSnowflakeType}/members/@me` |
`/guilds/${DiscordSnowflakeType}/members/search` |
`/guilds/${DiscordSnowflakeType}/members/${DiscordSnowflakeType}` |
`/guilds/${DiscordSnowflakeType}/members/${DiscordSnowflakeType}/roles/${DiscordSnowflakeType}` |
`/guilds/${DiscordSnowflakeType}/mfa` |
`/guilds/${DiscordSnowflakeType}/new-member-welcome` |
`/guilds/${DiscordSnowflakeType}/onboarding` |
`/guilds/${DiscordSnowflakeType}/preview` |
`/guilds/${DiscordSnowflakeType}/prune` |
`/guilds/${DiscordSnowflakeType}/regions` |
`/guilds/${DiscordSnowflakeType}/roles` |
`/guilds/${DiscordSnowflakeType}/roles/${DiscordSnowflakeType}` |
`/guilds/${DiscordSnowflakeType}/scheduled-events` |
`/guilds/${DiscordSnowflakeType}/scheduled-events/${DiscordSnowflakeType}` |
`/guilds/${DiscordSnowflakeType}/scheduled-events/${DiscordSnowflakeType}/users` |
`/guilds/${DiscordSnowflakeType}/soundboard-sounds` |
`/guilds/${DiscordSnowflakeType}/soundboard-sounds/${DiscordSnowflakeType}` |
`/guilds/${DiscordSnowflakeType}/stickers` |
`/guilds/${DiscordSnowflakeType}/stickers/${DiscordSnowflakeType}` |
`/guilds/${DiscordSnowflakeType}/templates` |
`/guilds/${DiscordSnowflakeType}/templates/${string}` |
`/guilds/${DiscordSnowflakeType}/threads/active` |
`/guilds/${DiscordSnowflakeType}/vanity-url` |
`/guilds/${DiscordSnowflakeType}/voice-states/@me` |
`/guilds/${DiscordSnowflakeType}/voice-states/${DiscordSnowflakeType}` |
`/guilds/${DiscordSnowflakeType}/webhooks` |
`/guilds/${DiscordSnowflakeType}/welcome-screen` |
`/guilds/${DiscordSnowflakeType}/widget` |
`/guilds/${DiscordSnowflakeType}/widget.json` |
`/guilds/${DiscordSnowflakeType}/widget.png` |
`/interactions/${DiscordSnowflakeType}/${string}/callback` |
`/invites/${string}` |
`/lobbies` |
`/lobbies/${DiscordSnowflakeType}` |
`/lobbies/${DiscordSnowflakeType}/channel-linking` |
`/lobbies/${DiscordSnowflakeType}/members/@me` |
`/lobbies/${DiscordSnowflakeType}/members/${DiscordSnowflakeType}` |
`/lobbies/${DiscordSnowflakeType}/messages` |
`/oauth2/@me` |
`/oauth2/applications/@me` |
`/oauth2/keys` |
`/oauth2/userinfo` |
`/partner-sdk/provisional-accounts/unmerge` |
`/partner-sdk/token` |
`/soundboard-default-sounds` |
`/stage-instances` |
`/stage-instances/${DiscordSnowflakeType}` |
`/sticker-packs` |
`/sticker-packs/${DiscordSnowflakeType}` |
`/stickers/${DiscordSnowflakeType}` |
`/users/@me` |
`/users/@me/applications/${DiscordSnowflakeType}/role-connection` |
`/users/@me/channels` |
`/users/@me/connections` |
`/users/@me/guilds` |
`/users/@me/guilds/${DiscordSnowflakeType}` |
`/users/@me/guilds/${DiscordSnowflakeType}/member` |
`/users/${DiscordSnowflakeType}` |
`/voice/regions` |
`/webhooks/${DiscordSnowflakeType}` |
`/webhooks/${DiscordSnowflakeType}/${string}` |
`/webhooks/${DiscordSnowflakeType}/${string}/github` |
`/webhooks/${DiscordSnowflakeType}/${string}/messages/@original` |
`/webhooks/${DiscordSnowflakeType}/${string}/messages/${DiscordSnowflakeType}` |
`/webhooks/${DiscordSnowflakeType}/${string}/slack`;

export type DiscordAccountResponse = {id: string, name?: string | null};  //object
export type DiscordActionRowComponentForMessageRequest = {type: (DiscordMessageComponentTypes), components: (DiscordButtonComponentForMessageRequest | DiscordChannelSelectComponentForMessageRequest | DiscordMentionableSelectComponentForMessageRequest | DiscordRoleSelectComponentForMessageRequest | DiscordStringSelectComponentForMessageRequest | DiscordUserSelectComponentForMessageRequest)[]};  //object
export type DiscordActionRowComponentForModalRequest = {type: (DiscordMessageComponentTypes), components: DiscordTextInputComponentForModalRequest[]};  //object
export type DiscordActionRowComponentResponse = {type: (DiscordMessageComponentTypes), id: number, components?: (DiscordButtonComponentResponse | DiscordChannelSelectComponentResponse | DiscordMentionableSelectComponentResponse | DiscordRoleSelectComponentResponse | DiscordStringSelectComponentResponse | DiscordTextInputComponentResponse | DiscordUserSelectComponentResponse)[] | null};  //object
export type DiscordActivitiesAttachmentResponse = {attachment: DiscordAttachmentResponse};  //object
export type DiscordAfkTimeouts = (60 | 300 | 900 | 1800 | 3600);  //integer
export type DiscordAllowedMentionTypes = ("users" | "roles" | "everyone");  //string
export type DiscordApplicationCommandAttachmentOption = {type: (DiscordApplicationCommandOptionType), name: string, name_localizations?: object | null, description: string, description_localizations?: object | null, required?: boolean | null};  //object
export type DiscordApplicationCommandAttachmentOptionResponse = {type: (DiscordApplicationCommandOptionType), name: string, name_localized?: string | null, name_localizations?: object | null, description: string, description_localized?: string | null, description_localizations?: object | null, required?: boolean | null};  //object
export type DiscordApplicationCommandAutocompleteCallbackRequest = {type: (DiscordInteractionCallbackTypes), data: (DiscordInteractionApplicationCommandAutocompleteCallbackIntegerData | DiscordInteractionApplicationCommandAutocompleteCallbackNumberData | DiscordInteractionApplicationCommandAutocompleteCallbackStringData)};  //object
export type DiscordApplicationCommandBooleanOption = {type: (DiscordApplicationCommandOptionType), name: string, name_localizations?: object | null, description: string, description_localizations?: object | null, required?: boolean | null};  //object
export type DiscordApplicationCommandBooleanOptionResponse = {type: (DiscordApplicationCommandOptionType), name: string, name_localized?: string | null, name_localizations?: object | null, description: string, description_localized?: string | null, description_localizations?: object | null, required?: boolean | null};  //object
export type DiscordApplicationCommandChannelOption = {type: (DiscordApplicationCommandOptionType), name: string, name_localizations?: object | null, description: string, description_localizations?: object | null, required?: boolean | null, channel_types?: DiscordChannelTypes[] | null};  //object
export type DiscordApplicationCommandChannelOptionResponse = {type: (DiscordApplicationCommandOptionType), name: string, name_localized?: string | null, name_localizations?: object | null, description: string, description_localized?: string | null, description_localizations?: object | null, required?: boolean | null, channel_types?: DiscordChannelTypes[] | null};  //object
export type DiscordApplicationCommandCreateRequest = {name: string, name_localizations?: object | null, description?: string | null, description_localizations?: object | null, options?: (DiscordApplicationCommandAttachmentOption | DiscordApplicationCommandBooleanOption | DiscordApplicationCommandChannelOption | DiscordApplicationCommandIntegerOption | DiscordApplicationCommandMentionableOption | DiscordApplicationCommandNumberOption | DiscordApplicationCommandRoleOption | DiscordApplicationCommandStringOption | DiscordApplicationCommandSubcommandGroupOption | DiscordApplicationCommandSubcommandOption | DiscordApplicationCommandUserOption)[] | null, default_member_permissions?: number | null, dm_permission?: boolean | null, contexts?: DiscordInteractionContextType[] | null, integration_types?: DiscordApplicationIntegrationType[] | null, handler?: (null | DiscordApplicationCommandHandler), type?: (null | DiscordApplicationCommandType)};  //object
export type DiscordApplicationCommandHandler = number;  //integer
export type DiscordApplicationCommandIntegerOption = {type: (DiscordApplicationCommandOptionType), name: string, name_localizations?: object | null, description: string, description_localizations?: object | null, required?: boolean | null, autocomplete?: boolean | null, choices?: DiscordApplicationCommandOptionIntegerChoice[] | null, min_value?: (null | DiscordInt53Type), max_value?: (null | DiscordInt53Type)};  //object
export type DiscordApplicationCommandIntegerOptionResponse = {type: (DiscordApplicationCommandOptionType), name: string, name_localized?: string | null, name_localizations?: object | null, description: string, description_localized?: string | null, description_localizations?: object | null, required?: boolean | null, autocomplete?: boolean | null, choices?: DiscordApplicationCommandOptionIntegerChoiceResponse[] | null, min_value?: (null | DiscordInt53Type), max_value?: (null | DiscordInt53Type)};  //object
export type DiscordApplicationCommandInteractionMetadataResponse = {id: DiscordSnowflakeType, type: (DiscordInteractionTypes), user?: (null | DiscordUserResponse), authorizing_integration_owners: object, original_response_message_id?: (null | DiscordSnowflakeType), target_user?: (null | DiscordUserResponse), target_message_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordApplicationCommandMentionableOption = {type: (DiscordApplicationCommandOptionType), name: string, name_localizations?: object | null, description: string, description_localizations?: object | null, required?: boolean | null};  //object
export type DiscordApplicationCommandMentionableOptionResponse = {type: (DiscordApplicationCommandOptionType), name: string, name_localized?: string | null, name_localizations?: object | null, description: string, description_localized?: string | null, description_localizations?: object | null, required?: boolean | null};  //object
export type DiscordApplicationCommandNumberOption = {type: (DiscordApplicationCommandOptionType), name: string, name_localizations?: object | null, description: string, description_localizations?: object | null, required?: boolean | null, autocomplete?: boolean | null, choices?: DiscordApplicationCommandOptionNumberChoice[] | null, min_value?: number | null, max_value?: number | null};  //object
export type DiscordApplicationCommandNumberOptionResponse = {type: (DiscordApplicationCommandOptionType), name: string, name_localized?: string | null, name_localizations?: object | null, description: string, description_localized?: string | null, description_localizations?: object | null, required?: boolean | null, autocomplete?: boolean | null, choices?: DiscordApplicationCommandOptionNumberChoiceResponse[] | null, min_value?: number | null, max_value?: number | null};  //object
export type DiscordApplicationCommandOptionIntegerChoice = {name: string, name_localizations?: object | null, value: DiscordInt53Type};  //object
export type DiscordApplicationCommandOptionIntegerChoiceResponse = {name: string, name_localized?: string | null, name_localizations?: object | null, value: DiscordInt53Type};  //object
export type DiscordApplicationCommandOptionNumberChoice = {name: string, name_localizations?: object | null, value: number};  //object
export type DiscordApplicationCommandOptionNumberChoiceResponse = {name: string, name_localized?: string | null, name_localizations?: object | null, value: number};  //object
export type DiscordApplicationCommandOptionStringChoice = {name: string, name_localizations?: object | null, value: string};  //object
export type DiscordApplicationCommandOptionStringChoiceResponse = {name: string, name_localized?: string | null, name_localizations?: object | null, value: string};  //object
export type DiscordApplicationCommandOptionType = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11);  //integer
export type DiscordApplicationCommandPatchRequestPartial = {name?: string, name_localizations?: object | null, description?: string | null, description_localizations?: object | null, options?: (DiscordApplicationCommandAttachmentOption | DiscordApplicationCommandBooleanOption | DiscordApplicationCommandChannelOption | DiscordApplicationCommandIntegerOption | DiscordApplicationCommandMentionableOption | DiscordApplicationCommandNumberOption | DiscordApplicationCommandRoleOption | DiscordApplicationCommandStringOption | DiscordApplicationCommandSubcommandGroupOption | DiscordApplicationCommandSubcommandOption | DiscordApplicationCommandUserOption)[] | null, default_member_permissions?: number | null, dm_permission?: boolean | null, contexts?: DiscordInteractionContextType[] | null, integration_types?: DiscordApplicationIntegrationType[] | null, handler?: (null | DiscordApplicationCommandHandler)};  //object
export type DiscordApplicationCommandPermission = {id: DiscordSnowflakeType, type: DiscordApplicationCommandPermissionType, permission: boolean};  //object
export type DiscordApplicationCommandPermissionType = (1 | 2 | 3);  //integer
export type DiscordApplicationCommandResponse = {id: DiscordSnowflakeType, application_id: DiscordSnowflakeType, version: DiscordSnowflakeType, default_member_permissions?: string | null, type: DiscordApplicationCommandType, name: string, name_localized?: string | null, name_localizations?: object | null, description: string, description_localized?: string | null, description_localizations?: object | null, guild_id?: (null | DiscordSnowflakeType), dm_permission?: boolean | null, contexts?: DiscordInteractionContextType[] | null, integration_types?: DiscordApplicationIntegrationType[] | null, options?: (DiscordApplicationCommandAttachmentOptionResponse | DiscordApplicationCommandBooleanOptionResponse | DiscordApplicationCommandChannelOptionResponse | DiscordApplicationCommandIntegerOptionResponse | DiscordApplicationCommandMentionableOptionResponse | DiscordApplicationCommandNumberOptionResponse | DiscordApplicationCommandRoleOptionResponse | DiscordApplicationCommandStringOptionResponse | DiscordApplicationCommandSubcommandGroupOptionResponse | DiscordApplicationCommandSubcommandOptionResponse | DiscordApplicationCommandUserOptionResponse)[] | null, nsfw?: boolean | null};  //object
export type DiscordApplicationCommandRoleOption = {type: (DiscordApplicationCommandOptionType), name: string, name_localizations?: object | null, description: string, description_localizations?: object | null, required?: boolean | null};  //object
export type DiscordApplicationCommandRoleOptionResponse = {type: (DiscordApplicationCommandOptionType), name: string, name_localized?: string | null, name_localizations?: object | null, description: string, description_localized?: string | null, description_localizations?: object | null, required?: boolean | null};  //object
export type DiscordApplicationCommandStringOption = {type: (DiscordApplicationCommandOptionType), name: string, name_localizations?: object | null, description: string, description_localizations?: object | null, required?: boolean | null, autocomplete?: boolean | null, min_length?: number | null, max_length?: number | null, choices?: DiscordApplicationCommandOptionStringChoice[] | null};  //object
export type DiscordApplicationCommandStringOptionResponse = {type: (DiscordApplicationCommandOptionType), name: string, name_localized?: string | null, name_localizations?: object | null, description: string, description_localized?: string | null, description_localizations?: object | null, required?: boolean | null, autocomplete?: boolean | null, choices?: DiscordApplicationCommandOptionStringChoiceResponse[] | null, min_length?: number | null, max_length?: number | null};  //object
export type DiscordApplicationCommandSubcommandGroupOption = {type: (DiscordApplicationCommandOptionType), name: string, name_localizations?: object | null, description: string, description_localizations?: object | null, required?: boolean | null, options?: DiscordApplicationCommandSubcommandOption[] | null};  //object
export type DiscordApplicationCommandSubcommandGroupOptionResponse = {type: (DiscordApplicationCommandOptionType), name: string, name_localized?: string | null, name_localizations?: object | null, description: string, description_localized?: string | null, description_localizations?: object | null, required?: boolean | null, options?: DiscordApplicationCommandSubcommandOptionResponse[] | null};  //object
export type DiscordApplicationCommandSubcommandOption = {type: (DiscordApplicationCommandOptionType), name: string, name_localizations?: object | null, description: string, description_localizations?: object | null, required?: boolean | null, options?: (DiscordApplicationCommandAttachmentOption | DiscordApplicationCommandBooleanOption | DiscordApplicationCommandChannelOption | DiscordApplicationCommandIntegerOption | DiscordApplicationCommandMentionableOption | DiscordApplicationCommandNumberOption | DiscordApplicationCommandRoleOption | DiscordApplicationCommandStringOption | DiscordApplicationCommandUserOption)[] | null};  //object
export type DiscordApplicationCommandSubcommandOptionResponse = {type: (DiscordApplicationCommandOptionType), name: string, name_localized?: string | null, name_localizations?: object | null, description: string, description_localized?: string | null, description_localizations?: object | null, required?: boolean | null, options?: (DiscordApplicationCommandAttachmentOptionResponse | DiscordApplicationCommandBooleanOptionResponse | DiscordApplicationCommandChannelOptionResponse | DiscordApplicationCommandIntegerOptionResponse | DiscordApplicationCommandMentionableOptionResponse | DiscordApplicationCommandNumberOptionResponse | DiscordApplicationCommandRoleOptionResponse | DiscordApplicationCommandStringOptionResponse | DiscordApplicationCommandUserOptionResponse)[] | null};  //object
export type DiscordApplicationCommandType = (1 | 2 | 3 | 4);  //integer
export type DiscordApplicationCommandUpdateRequest = {name: string, name_localizations?: object | null, description?: string | null, description_localizations?: object | null, options?: (DiscordApplicationCommandAttachmentOption | DiscordApplicationCommandBooleanOption | DiscordApplicationCommandChannelOption | DiscordApplicationCommandIntegerOption | DiscordApplicationCommandMentionableOption | DiscordApplicationCommandNumberOption | DiscordApplicationCommandRoleOption | DiscordApplicationCommandStringOption | DiscordApplicationCommandSubcommandGroupOption | DiscordApplicationCommandSubcommandOption | DiscordApplicationCommandUserOption)[] | null, default_member_permissions?: number | null, dm_permission?: boolean | null, contexts?: DiscordInteractionContextType[] | null, integration_types?: DiscordApplicationIntegrationType[] | null, handler?: (null | DiscordApplicationCommandHandler), type?: (null | DiscordApplicationCommandType), id?: (null | DiscordSnowflakeType)};  //object
export type DiscordApplicationCommandUserOption = {type: (DiscordApplicationCommandOptionType), name: string, name_localizations?: object | null, description: string, description_localizations?: object | null, required?: boolean | null};  //object
export type DiscordApplicationCommandUserOptionResponse = {type: (DiscordApplicationCommandOptionType), name: string, name_localized?: string | null, name_localizations?: object | null, description: string, description_localized?: string | null, description_localizations?: object | null, required?: boolean | null};  //object
export type DiscordApplicationExplicitContentFilterTypes = (0 | 1);  //integer
export type DiscordApplicationFormPartial = {description?: {default: string, localizations?: object | null} | null, icon?: string | null, cover_image?: string | null, team_id?: (null | DiscordSnowflakeType), flags?: number | null, interactions_endpoint_url?: string | null, explicit_content_filter?: (null | DiscordApplicationExplicitContentFilterTypes), max_participants?: number | null, type?: (null | DiscordApplicationTypes), tags?: string[] | null, custom_install_url?: string | null, install_params?: (null | DiscordApplicationOAuth2InstallParams), role_connections_verification_url?: string | null, integration_types_config?: object | null};  //object
export type DiscordApplicationIdentityProviderAuthType = ("OIDC" | "EPIC_ONLINE_SERVICES_ACCESS_TOKEN" | "EPIC_ONLINE_SERVICES_ID_TOKEN" | "STEAM_SESSION_TICKET" | "UNITY_SERVICES_ID_TOKEN");  //string
export type DiscordApplicationIncomingWebhookResponse = {application_id?: (null | DiscordSnowflakeType), avatar?: string | null, channel_id?: (null | DiscordSnowflakeType), guild_id?: (null | DiscordSnowflakeType), id: DiscordSnowflakeType, name: string, type: (DiscordWebhookTypes), user?: (null | DiscordUserResponse)};  //object
export type DiscordApplicationIntegrationType = (0 | 1);  //integer
export type DiscordApplicationIntegrationTypeConfiguration = {oauth2_install_params?: (null | DiscordApplicationOAuth2InstallParams)};  //object
export type DiscordApplicationIntegrationTypeConfigurationResponse = {oauth2_install_params?: (null | DiscordApplicationOAuth2InstallParamsResponse)};  //object
export type DiscordApplicationOAuth2InstallParams = {scopes?: (DiscordOAuth2Scopes)[] | null, permissions?: number | null};  //object
export type DiscordApplicationOAuth2InstallParamsResponse = {scopes: (DiscordOAuth2Scopes)[], permissions: string};  //object
export type DiscordApplicationResponse = {id: DiscordSnowflakeType, name: string, icon?: string | null, description: string, type?: (null | DiscordApplicationTypes), cover_image?: string | null, primary_sku_id?: (null | DiscordSnowflakeType), bot?: (null | DiscordUserResponse), slug?: string | null, guild_id?: (null | DiscordSnowflakeType), rpc_origins?: string | null[] | null, bot_public?: boolean | null, bot_require_code_grant?: boolean | null, terms_of_service_url?: string | null, privacy_policy_url?: string | null, custom_install_url?: string | null, install_params?: (null | DiscordApplicationOAuth2InstallParamsResponse), integration_types_config?: object | null, verify_key: string, flags: number, max_participants?: number | null, tags?: string[] | null};  //object
export type DiscordApplicationRoleConnectionsMetadataItemRequest = {type: DiscordMetadataItemTypes, key: string, name: string, name_localizations?: object | null, description: string, description_localizations?: object | null};  //object
export type DiscordApplicationRoleConnectionsMetadataItemResponse = {type: DiscordMetadataItemTypes, key: string, name: string, name_localizations?: object | null, description: string, description_localizations?: object | null};  //object
export type DiscordApplicationTypes = (4);  //integer
export type DiscordApplicationUserRoleConnectionResponse = {platform_name?: string | null, platform_username?: string | null, metadata?: object | null};  //object
export type DiscordAttachmentResponse = {id: DiscordSnowflakeType, filename: string, size: number, url: string, proxy_url: string, width?: number | null, height?: number | null, duration_secs?: number | null, waveform?: string | null, description?: string | null, content_type?: string | null, ephemeral?: boolean | null, title?: string | null, application?: (null | DiscordApplicationResponse), clip_created_at?: string | null, clip_participants?: DiscordUserResponse[] | null};  //object
export type DiscordAuditLogActionTypes = (1 | 10 | 11 | 12 | 13 | 14 | 15 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 30 | 31 | 32 | 40 | 41 | 42 | 50 | 51 | 52 | 60 | 61 | 62 | 72 | 73 | 74 | 75 | 80 | 81 | 82 | 83 | 84 | 85 | 90 | 91 | 92 | 100 | 101 | 102 | 110 | 111 | 112 | 121 | 130 | 131 | 132 | 140 | 141 | 142 | 143 | 144 | 145 | 146 | 150 | 151 | 163 | 164 | 165 | 166 | 167 | 171 | 172 | 180 | 190 | 191 | 192 | 193 | 211);  //integer
export type DiscordAuditLogEntryResponse = {id: DiscordSnowflakeType, action_type: DiscordAuditLogActionTypes, user_id?: (null | DiscordSnowflakeType), target_id?: (null | DiscordSnowflakeType), changes?: DiscordAuditLogObjectChangeResponse[] | null, options?: object | null, reason?: string | null};  //object
export type DiscordAuditLogObjectChangeResponse = {key?: string | null, new_value?: unknown, old_value?: unknown};  //object
export type DiscordAutomodActionType = (1 | 2 | 3 | 4);  //integer
export type DiscordAutomodEventType = (1 | 2);  //integer
export type DiscordAutomodKeywordPresetType = (1 | 2 | 3);  //integer
export type DiscordAutomodTriggerType = (1 | 2 | 3 | 4 | 5);  //integer
export type DiscordAvailableLocalesEnum = ("ar" | "bg" | "cs" | "da" | "de" | "el" | "en-GB" | "en-US" | "es-419" | "es-ES" | "fi" | "fr" | "he" | "hi" | "hr" | "hu" | "id" | "it" | "ja" | "ko" | "lt" | "nl" | "no" | "pl" | "pt-BR" | "ro" | "ru" | "sv-SE" | "th" | "tr" | "uk" | "vi" | "zh-CN" | "zh-TW");  //string
export type DiscordBaseCreateMessageCreateRequest = {content?: string | null, embeds?: DiscordRichEmbed[] | null, allowed_mentions?: (null | DiscordMessageAllowedMentionsRequest), sticker_ids?: DiscordSnowflakeType[] | null, components?: (DiscordActionRowComponentForMessageRequest | DiscordContainerComponentForMessageRequest | DiscordFileComponentForMessageRequest | DiscordMediaGalleryComponentForMessageRequest | DiscordSectionComponentForMessageRequest | DiscordSeparatorComponentForMessageRequest | DiscordTextDisplayComponentForMessageRequest)[] | null, flags?: number | null, attachments?: DiscordMessageAttachmentRequest[] | null, poll?: (null | DiscordPollCreateRequest), confetti_potion?: (null | DiscordConfettiPotionCreateRequest)};  //object
export type DiscordBasicApplicationResponse = {id: DiscordSnowflakeType, name: string, icon?: string | null, description: string, type?: (null | DiscordApplicationTypes), cover_image?: string | null, primary_sku_id?: (null | DiscordSnowflakeType), bot?: (null | DiscordUserResponse)};  //object
export type DiscordBasicMessageResponse = {type: DiscordMessageType, content: string, mentions: DiscordUserResponse[], mention_roles: DiscordSnowflakeType[], attachments: DiscordMessageAttachmentResponse[], embeds: DiscordMessageEmbedResponse[], timestamp: string, edited_timestamp?: string | null, flags: number, components: (DiscordActionRowComponentResponse | DiscordContainerComponentResponse | DiscordFileComponentResponse | DiscordMediaGalleryComponentResponse | DiscordSectionComponentResponse | DiscordSeparatorComponentResponse | DiscordTextDisplayComponentResponse)[], resolved?: (null | DiscordResolvedObjectsResponse), stickers?: (DiscordGuildStickerResponse | DiscordStandardStickerResponse)[] | null, sticker_items?: DiscordMessageStickerItemResponse[] | null, id: DiscordSnowflakeType, channel_id: DiscordSnowflakeType, author: DiscordUserResponse, pinned: boolean, mention_everyone: boolean, tts: boolean, call?: (null | DiscordMessageCallResponse), activity?: (null | DiscordMessageActivityResponse), application?: (null | DiscordBasicApplicationResponse), application_id?: (null | DiscordSnowflakeType), interaction?: (null | DiscordMessageInteractionResponse), nonce?: (number | string | null), webhook_id?: (null | DiscordSnowflakeType), message_reference?: (null | DiscordMessageReferenceResponse), thread?: (null | DiscordThreadResponse), mention_channels?: (null | DiscordMessageMentionChannelResponse)[] | null, role_subscription_data?: (null | DiscordMessageRoleSubscriptionDataResponse), purchase_notification?: (null | DiscordPurchaseNotificationResponse), position?: number | null, poll?: (null | DiscordPollResponse), interaction_metadata?: (DiscordApplicationCommandInteractionMetadataResponse | DiscordMessageComponentInteractionMetadataResponse | DiscordModalSubmitInteractionMetadataResponse | null), message_snapshots?: DiscordMessageSnapshotResponse[] | null};  //object
export type DiscordBlockMessageAction = {type: (DiscordAutomodActionType), metadata?: (null | DiscordBlockMessageActionMetadata)};  //object
export type DiscordBlockMessageActionMetadata = {custom_message?: string | null};  //object
export type DiscordBlockMessageActionMetadataResponse = {custom_message?: string | null};  //object
export type DiscordBlockMessageActionResponse = {type: (DiscordAutomodActionType), metadata: DiscordBlockMessageActionMetadataResponse};  //object
export type DiscordBotAccountPatchRequest = {username: string, avatar?: string | null, banner?: string | null};  //object
export type DiscordBulkBanUsersResponse = {banned_users: DiscordSnowflakeType[], failed_users: DiscordSnowflakeType[]};  //object
export type DiscordButtonComponentForMessageRequest = {type: (DiscordMessageComponentTypes), custom_id?: string | null, style: DiscordButtonStyleTypes, label?: string | null, disabled?: boolean | null, url?: string | null, sku_id?: (null | DiscordSnowflakeType), emoji?: (null | DiscordComponentEmojiForMessageRequest)};  //object
export type DiscordButtonComponentResponse = {type: (DiscordMessageComponentTypes), id: number, custom_id?: string | null, style: DiscordButtonStyleTypes, label?: string | null, disabled?: boolean | null, emoji?: (null | DiscordComponentEmojiResponse), url?: string | null, sku_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordButtonStyleTypes = (1 | 2 | 3 | 4 | 5 | 6);  //integer
export type DiscordChannelFollowerResponse = {channel_id: DiscordSnowflakeType, webhook_id: DiscordSnowflakeType};  //object
export type DiscordChannelFollowerWebhookResponse = {application_id?: (null | DiscordSnowflakeType), avatar?: string | null, channel_id?: (null | DiscordSnowflakeType), guild_id?: (null | DiscordSnowflakeType), id: DiscordSnowflakeType, name: string, type: (DiscordWebhookTypes), user?: (null | DiscordUserResponse), source_guild?: (null | DiscordWebhookSourceGuildResponse), source_channel?: (null | DiscordWebhookSourceChannelResponse)};  //object
export type DiscordChannelPermissionOverwriteRequest = {id: DiscordSnowflakeType, type?: (null | DiscordChannelPermissionOverwrites), allow?: number | null, deny?: number | null};  //object
export type DiscordChannelPermissionOverwriteResponse = {id: DiscordSnowflakeType, type: DiscordChannelPermissionOverwrites, allow: string, deny: string};  //object
export type DiscordChannelPermissionOverwrites = (0 | 1);  //integer
export type DiscordChannelSelectComponentForMessageRequest = {type: (DiscordMessageComponentTypes), custom_id: string, placeholder?: string | null, min_values?: number | null, max_values?: number | null, disabled?: boolean | null, default_values?: DiscordChannelSelectDefaultValue[] | null, channel_types?: DiscordChannelTypes[] | null};  //object
export type DiscordChannelSelectComponentResponse = {type: (DiscordMessageComponentTypes), id: number, custom_id: string, placeholder?: string | null, min_values?: number | null, max_values?: number | null, disabled?: boolean | null, channel_types?: DiscordChannelTypes[] | null, default_values?: DiscordChannelSelectDefaultValueResponse[] | null};  //object
export type DiscordChannelSelectDefaultValue = {type: (DiscordSnowflakeSelectDefaultValueTypes), id: DiscordSnowflakeType};  //object
export type DiscordChannelSelectDefaultValueResponse = {type: (DiscordSnowflakeSelectDefaultValueTypes), id: DiscordSnowflakeType};  //object
export type DiscordChannelTypes = (1 | 3 | 0 | 2 | 4 | 5 | 10 | 11 | 12 | 13 | 14 | 15);  //integer
export type DiscordCommandPermissionResponse = {id: DiscordSnowflakeType, type: DiscordApplicationCommandPermissionType, permission: boolean};  //object
export type DiscordCommandPermissionsResponse = {id: DiscordSnowflakeType, application_id: DiscordSnowflakeType, guild_id: DiscordSnowflakeType, permissions: DiscordCommandPermissionResponse[]};  //object
export type DiscordComponentEmojiForMessageRequest = {id?: (null | DiscordSnowflakeType), name: string};  //object
export type DiscordComponentEmojiResponse = {id?: (null | DiscordSnowflakeType), name: string, animated?: boolean | null};  //object
export type DiscordConfettiPotionCreateRequest = object;  //object
export type DiscordConnectedAccountGuildResponse = {id: DiscordSnowflakeType, name: string, icon?: string | null};  //object
export type DiscordConnectedAccountIntegrationResponse = {id: string, type: DiscordIntegrationTypes, account: DiscordAccountResponse, guild: DiscordConnectedAccountGuildResponse};  //object
export type DiscordConnectedAccountProviders = ("battlenet" | "bluesky" | "bungie" | "ebay" | "epicgames" | "facebook" | "github" | "instagram" | "mastodon" | "leagueoflegends" | "paypal" | "playstation" | "reddit" | "riotgames" | "roblox" | "skype" | "spotify" | "steam" | "tiktok" | "twitch" | "twitter" | "xbox" | "youtube" | "domain");  //string
export type DiscordConnectedAccountResponse = {id: string, name?: string | null, type: DiscordConnectedAccountProviders, friend_sync: boolean, integrations?: DiscordConnectedAccountIntegrationResponse[] | null, show_activity: boolean, two_way_link: boolean, verified: boolean, visibility: DiscordConnectedAccountVisibility, revoked?: boolean | null};  //object
export type DiscordConnectedAccountVisibility = (0 | 1);  //integer
export type DiscordContainerComponentForMessageRequest = {type: (DiscordMessageComponentTypes), accent_color?: number | null, components: (DiscordActionRowComponentForMessageRequest | DiscordFileComponentForMessageRequest | DiscordMediaGalleryComponentForMessageRequest | DiscordSectionComponentForMessageRequest | DiscordSeparatorComponentForMessageRequest | DiscordTextDisplayComponentForMessageRequest)[], spoiler?: boolean | null};  //object
export type DiscordContainerComponentResponse = {type: (DiscordMessageComponentTypes), id: number, accent_color?: number | null, components: (DiscordActionRowComponentResponse | DiscordFileComponentResponse | DiscordMediaGalleryComponentResponse | DiscordSectionComponentResponse | DiscordSeparatorComponentResponse | DiscordTextDisplayComponentResponse)[], spoiler: boolean};  //object
export type DiscordCreateEntitlementRequestData = {sku_id: DiscordSnowflakeType, owner_id: DiscordSnowflakeType, owner_type: DiscordEntitlementOwnerTypes};  //object
export type DiscordCreateForumThreadRequest = {name: string, auto_archive_duration?: (null | DiscordThreadAutoArchiveDuration), rate_limit_per_user?: number | null, applied_tags?: DiscordSnowflakeType[] | null, message: DiscordBaseCreateMessageCreateRequest};  //object
export type DiscordCreateGroupDMInviteRequest = {max_age?: number | null};  //object
export type DiscordCreateGuildChannelRequest = {type?: (null | (DiscordChannelTypes)), name: string, position?: number | null, topic?: string | null, bitrate?: number | null, user_limit?: number | null, nsfw?: boolean | null, rate_limit_per_user?: number | null, parent_id?: (null | DiscordSnowflakeType), permission_overwrites?: DiscordChannelPermissionOverwriteRequest[] | null, rtc_region?: string | null, video_quality_mode?: (null | DiscordVideoQualityModes), default_auto_archive_duration?: (null | DiscordThreadAutoArchiveDuration), default_reaction_emoji?: (null | DiscordUpdateDefaultReactionEmojiRequest), default_thread_rate_limit_per_user?: number | null, default_sort_order?: (null | DiscordThreadSortOrder), default_forum_layout?: (null | DiscordForumLayout), default_tag_setting?: (null | DiscordThreadSearchTagSetting), available_tags?: (null | DiscordCreateOrUpdateThreadTagRequest)[] | null};  //object
export type DiscordCreateGuildInviteRequest = {max_age?: number | null, temporary?: boolean | null, max_uses?: number | null, unique?: boolean | null, target_user_id?: (null | DiscordSnowflakeType), target_application_id?: (null | DiscordSnowflakeType), target_type?: (null | (DiscordInviteTargetTypes))};  //object
export type DiscordCreateGuildRequestChannelItem = {type?: (null | (DiscordChannelTypes)), name: string, position?: number | null, topic?: string | null, bitrate?: number | null, user_limit?: number | null, nsfw?: boolean | null, rate_limit_per_user?: number | null, parent_id?: (null | DiscordSnowflakeType), permission_overwrites?: DiscordChannelPermissionOverwriteRequest[] | null, rtc_region?: string | null, video_quality_mode?: (null | DiscordVideoQualityModes), default_auto_archive_duration?: (null | DiscordThreadAutoArchiveDuration), default_reaction_emoji?: (null | DiscordUpdateDefaultReactionEmojiRequest), default_thread_rate_limit_per_user?: number | null, default_sort_order?: (null | DiscordThreadSortOrder), default_forum_layout?: (null | DiscordForumLayout), default_tag_setting?: (null | DiscordThreadSearchTagSetting), id?: (null | DiscordSnowflakeType), available_tags?: DiscordCreateOrUpdateThreadTagRequest[] | null};  //object
export type DiscordCreateGuildRequestRoleItem = {id: number, name?: string | null, permissions?: number | null, color?: number | null, hoist?: boolean | null, mentionable?: boolean | null, unicode_emoji?: string | null};  //object
export type DiscordCreateMessageInteractionCallbackRequest = {type: (DiscordInteractionCallbackTypes), data?: (null | DiscordIncomingWebhookInteractionRequest)};  //object
export type DiscordCreateMessageInteractionCallbackResponse = {type: (DiscordInteractionCallbackTypes), message: DiscordMessageResponse};  //object
export type DiscordCreateOrUpdateThreadTagRequest = {name: string, emoji_id?: (null | DiscordSnowflakeType), emoji_name?: string | null, moderated?: boolean | null};  //object
export type DiscordCreatePrivateChannelRequest = {recipient_id?: (null | DiscordSnowflakeType), access_tokens?: string[] | null, nicks?: object | null};  //object
export type DiscordCreateTextThreadWithMessageRequest = {name: string, auto_archive_duration?: (null | DiscordThreadAutoArchiveDuration), rate_limit_per_user?: number | null};  //object
export type DiscordCreateTextThreadWithoutMessageRequest = {name: string, auto_archive_duration?: (null | DiscordThreadAutoArchiveDuration), rate_limit_per_user?: number | null, type?: (null | (DiscordChannelTypes)), invitable?: boolean | null};  //object
export type DiscordCreatedThreadResponse = {id: DiscordSnowflakeType, type: (DiscordChannelTypes), last_message_id?: (null | DiscordSnowflakeType), flags: number, last_pin_timestamp?: string | null, guild_id: DiscordSnowflakeType, name: string, parent_id?: (null | DiscordSnowflakeType), rate_limit_per_user?: number | null, bitrate?: number | null, user_limit?: number | null, rtc_region?: string | null, video_quality_mode?: (null | DiscordVideoQualityModes), permissions?: string | null, owner_id: DiscordSnowflakeType, thread_metadata?: (null | DiscordThreadMetadataResponse), message_count: number, member_count: number, total_message_sent: number, applied_tags?: DiscordSnowflakeType[] | null, member?: (null | DiscordThreadMemberResponse)};  //object
export type DiscordDefaultKeywordListTriggerMetadata = {allow_list?: string[] | null, presets?: DiscordAutomodKeywordPresetType[] | null};  //object
export type DiscordDefaultKeywordListTriggerMetadataResponse = {allow_list: string[], presets: DiscordAutomodKeywordPresetType[]};  //object
export type DiscordDefaultKeywordListUpsertRequest = {name: string, event_type: DiscordAutomodEventType, actions?: (DiscordBlockMessageAction | DiscordFlagToChannelAction | DiscordQuarantineUserAction | DiscordUserCommunicationDisabledAction)[] | null, enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_type: (DiscordAutomodTriggerType), trigger_metadata: DiscordDefaultKeywordListTriggerMetadata};  //object
export type DiscordDefaultKeywordListUpsertRequestPartial = {name?: string, event_type?: DiscordAutomodEventType, actions?: (DiscordBlockMessageAction | DiscordFlagToChannelAction | DiscordQuarantineUserAction | DiscordUserCommunicationDisabledAction)[] | null, enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_type?: (DiscordAutomodTriggerType), trigger_metadata?: DiscordDefaultKeywordListTriggerMetadata};  //object
export type DiscordDefaultKeywordRuleResponse = {id: DiscordSnowflakeType, guild_id: DiscordSnowflakeType, creator_id: DiscordSnowflakeType, name: string, event_type: DiscordAutomodEventType, actions: (DiscordBlockMessageActionResponse | DiscordFlagToChannelActionResponse | DiscordQuarantineUserActionResponse | DiscordUserCommunicationDisabledActionResponse)[], trigger_type: (DiscordAutomodTriggerType), enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_metadata: DiscordDefaultKeywordListTriggerMetadataResponse};  //object
export type DiscordDefaultReactionEmojiResponse = {emoji_id?: (null | DiscordSnowflakeType), emoji_name?: string | null};  //object
export type DiscordDiscordIntegrationResponse = {type: (DiscordIntegrationTypes), name?: string | null, account?: (null | DiscordAccountResponse), enabled?: boolean | null, id: DiscordSnowflakeType, application: DiscordIntegrationApplicationResponse, scopes: (DiscordOAuth2Scopes)[], user?: (null | DiscordUserResponse)};  //object
export type DiscordEmbeddedActivityInstance = {application_id: DiscordSnowflakeType, instance_id: string, launch_id: string, location?: (DiscordGuildChannelLocation | DiscordPrivateChannelLocation | null), users: DiscordSnowflakeType[]};  //object
export type DiscordEmbeddedActivityLocationKind = ("gc" | "pc");  //string
export type DiscordEmojiResponse = {id: DiscordSnowflakeType, name: string, user?: (null | DiscordUserResponse), roles: DiscordSnowflakeType[], require_colons: boolean, managed: boolean, animated: boolean, available: boolean};  //object
export type DiscordEntitlementOwnerTypes = number;  //integer
export type DiscordEntitlementResponse = {id: DiscordSnowflakeType, sku_id: DiscordSnowflakeType, application_id: DiscordSnowflakeType, user_id: DiscordSnowflakeType, guild_id?: (null | DiscordSnowflakeType), deleted: boolean, starts_at?: string | null, ends_at?: string | null, type: DiscordEntitlementTypes, fulfilled_at?: string | null, fulfillment_status?: (null | DiscordEntitlementTenantFulfillmentStatusResponse), consumed?: boolean | null};  //object
export type DiscordEntitlementTenantFulfillmentStatusResponse = (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7);  //integer
export type DiscordEntitlementTypes = (8 | 10);  //integer
export type DiscordEntityMetadataExternal = {location: string};  //object
export type DiscordEntityMetadataExternalResponse = {location: string};  //object
export type DiscordEntityMetadataStageInstance = object;  //object
export type DiscordEntityMetadataStageInstanceResponse = object;  //object
export type DiscordEntityMetadataVoice = object;  //object
export type DiscordEntityMetadataVoiceResponse = object;  //object
export type DiscordExternalConnectionIntegrationResponse = {type: (DiscordIntegrationTypes), name?: string | null, account?: (null | DiscordAccountResponse), enabled?: boolean | null, id: string, user: DiscordUserResponse, revoked?: boolean | null, expire_behavior?: (null | DiscordIntegrationExpireBehaviorTypes), expire_grace_period?: (null | DiscordIntegrationExpireGracePeriodTypes), subscriber_count?: number | null, synced_at?: string | null, role_id?: (null | DiscordSnowflakeType), syncing?: boolean | null, enable_emoticons?: boolean | null};  //object
export type DiscordExternalScheduledEventCreateRequest = {name: string, description?: string | null, image?: string | null, scheduled_start_time: string, scheduled_end_time?: string | null, privacy_level: DiscordGuildScheduledEventPrivacyLevels, entity_type: (DiscordGuildScheduledEventEntityTypes), channel_id?: (null | DiscordSnowflakeType), entity_metadata: DiscordEntityMetadataExternal};  //object
export type DiscordExternalScheduledEventPatchRequestPartial = {status?: (null | DiscordGuildScheduledEventStatuses), name?: string, description?: string | null, image?: string | null, scheduled_start_time?: string, scheduled_end_time?: string | null, entity_type?: (null | (DiscordGuildScheduledEventEntityTypes)), privacy_level?: DiscordGuildScheduledEventPrivacyLevels, channel_id?: (null | DiscordSnowflakeType), entity_metadata?: DiscordEntityMetadataExternal};  //object
export type DiscordExternalScheduledEventResponse = {id: DiscordSnowflakeType, guild_id: DiscordSnowflakeType, name: string, description?: string | null, channel_id?: (null | DiscordSnowflakeType), creator_id?: (null | DiscordSnowflakeType), creator?: (null | DiscordUserResponse), image?: string | null, scheduled_start_time: string, scheduled_end_time?: string | null, status: DiscordGuildScheduledEventStatuses, entity_type: (DiscordGuildScheduledEventEntityTypes), entity_id?: (null | DiscordSnowflakeType), user_count?: number | null, privacy_level: DiscordGuildScheduledEventPrivacyLevels, user_rsvp?: (null | DiscordScheduledEventUserResponse), entity_metadata: DiscordEntityMetadataExternalResponse};  //object
export type DiscordFileComponentForMessageRequest = {type: (DiscordMessageComponentTypes), spoiler?: boolean | null, file: DiscordUnfurledMediaRequestWithAttachmentReferenceRequired};  //object
export type DiscordFileComponentResponse = {type: (DiscordMessageComponentTypes), id: number, file: DiscordUnfurledMediaResponse, name?: string | null, size?: number | null, spoiler: boolean};  //object
export type DiscordFlagToChannelAction = {type: (DiscordAutomodActionType), metadata: DiscordFlagToChannelActionMetadata};  //object
export type DiscordFlagToChannelActionMetadata = {channel_id: DiscordSnowflakeType};  //object
export type DiscordFlagToChannelActionMetadataResponse = {channel_id: DiscordSnowflakeType};  //object
export type DiscordFlagToChannelActionResponse = {type: (DiscordAutomodActionType), metadata: DiscordFlagToChannelActionMetadataResponse};  //object
export type DiscordForumLayout = (0 | 1 | 2);  //integer
export type DiscordForumTagResponse = {id: DiscordSnowflakeType, name: string, moderated: boolean, emoji_id?: (null | DiscordSnowflakeType), emoji_name?: string | null};  //object
export type DiscordFriendInviteResponse = {type?: (null | (DiscordInviteTypes)), code: string, inviter?: (null | DiscordUserResponse), max_age?: number | null, created_at?: string | null, expires_at?: string | null, friends_count?: number | null, channel?: (null | DiscordInviteChannelResponse), is_contact?: boolean | null, uses?: number | null, max_uses?: number | null, flags?: number | null};  //object
export type DiscordGatewayBotResponse = {url: string, session_start_limit: DiscordGatewayBotSessionStartLimitResponse, shards: number};  //object
export type DiscordGatewayBotSessionStartLimitResponse = {max_concurrency: number, remaining: number, reset_after: number, total: number};  //object
export type DiscordGatewayResponse = {url: string};  //object
export type DiscordGithubAuthor = {username?: string | null, name: string};  //object
export type DiscordGithubCheckApp = {name: string};  //object
export type DiscordGithubCheckPullRequest = {number: number};  //object
export type DiscordGithubCheckRun = {conclusion?: string | null, name: string, html_url: string, check_suite: DiscordGithubCheckSuite, details_url?: string | null, output?: (null | DiscordGithubCheckRunOutput), pull_requests?: DiscordGithubCheckPullRequest[] | null};  //object
export type DiscordGithubCheckRunOutput = {title?: string | null, summary?: string | null};  //object
export type DiscordGithubCheckSuite = {conclusion?: string | null, head_branch?: string | null, head_sha: string, pull_requests?: DiscordGithubCheckPullRequest[] | null, app: DiscordGithubCheckApp};  //object
export type DiscordGithubComment = {id: number, html_url: string, user: DiscordGithubUser, commit_id?: string | null, body: string};  //object
export type DiscordGithubCommit = {id: string, url: string, message: string, author: DiscordGithubAuthor};  //object
export type DiscordGithubDiscussion = {title: string, number: number, html_url: string, answer_html_url?: string | null, body?: string | null, user: DiscordGithubUser};  //object
export type DiscordGithubIssue = {id: number, number: number, html_url: string, user: DiscordGithubUser, title: string, body?: string | null, pull_request?: unknown};  //object
export type DiscordGithubRelease = {id: number, tag_name: string, html_url: string, author: DiscordGithubUser};  //object
export type DiscordGithubRepository = {id: number, html_url: string, name: string, full_name: string};  //object
export type DiscordGithubReview = {user: DiscordGithubUser, body?: string | null, html_url: string, state: string};  //object
export type DiscordGithubUser = {id: number, login: string, html_url: string, avatar_url: string};  //object
export type DiscordGithubWebhook = {action?: string | null, ref?: string | null, ref_type?: string | null, comment?: (null | DiscordGithubComment), issue?: (null | DiscordGithubIssue), pull_request?: (null | DiscordGithubIssue), repository?: (null | DiscordGithubRepository), forkee?: (null | DiscordGithubRepository), sender: DiscordGithubUser, member?: (null | DiscordGithubUser), release?: (null | DiscordGithubRelease), head_commit?: (null | DiscordGithubCommit), commits?: DiscordGithubCommit[] | null, forced?: boolean | null, compare?: string | null, review?: (null | DiscordGithubReview), check_run?: (null | DiscordGithubCheckRun), check_suite?: (null | DiscordGithubCheckSuite), discussion?: (null | DiscordGithubDiscussion), answer?: (null | DiscordGithubComment)};  //object
export type DiscordGroupDMInviteResponse = {type?: (null | (DiscordInviteTypes)), code: string, inviter?: (null | DiscordUserResponse), max_age?: number | null, created_at?: string | null, expires_at?: string | null, channel?: (null | DiscordInviteChannelResponse), approximate_member_count?: number | null};  //object
export type DiscordGuildAuditLogResponse = {audit_log_entries: DiscordAuditLogEntryResponse[], users: DiscordUserResponse[], integrations: (DiscordPartialDiscordIntegrationResponse | DiscordPartialExternalConnectionIntegrationResponse | DiscordPartialGuildSubscriptionIntegrationResponse)[], webhooks: (DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)[], guild_scheduled_events: (DiscordExternalScheduledEventResponse | DiscordStageScheduledEventResponse | DiscordVoiceScheduledEventResponse)[], threads: DiscordThreadResponse[], application_commands: DiscordApplicationCommandResponse[], auto_moderation_rules: (DiscordDefaultKeywordRuleResponse | DiscordKeywordRuleResponse | DiscordMLSpamRuleResponse | DiscordMentionSpamRuleResponse | DiscordSpamLinkRuleResponse | null)[]};  //object
export type DiscordGuildBanResponse = {user: DiscordUserResponse, reason?: string | null};  //object
export type DiscordGuildChannelLocation = {id: string, kind: (DiscordEmbeddedActivityLocationKind), channel_id: DiscordSnowflakeType, guild_id: DiscordSnowflakeType};  //object
export type DiscordGuildChannelResponse = {id: DiscordSnowflakeType, type: (DiscordChannelTypes), last_message_id?: (null | DiscordSnowflakeType), flags: number, last_pin_timestamp?: string | null, guild_id: DiscordSnowflakeType, name: string, parent_id?: (null | DiscordSnowflakeType), rate_limit_per_user?: number | null, bitrate?: number | null, user_limit?: number | null, rtc_region?: string | null, video_quality_mode?: (null | DiscordVideoQualityModes), permissions?: string | null, topic?: string | null, default_auto_archive_duration?: (null | DiscordThreadAutoArchiveDuration), default_thread_rate_limit_per_user?: number | null, position: number, permission_overwrites?: DiscordChannelPermissionOverwriteResponse[] | null, nsfw?: boolean | null, available_tags?: DiscordForumTagResponse[] | null, default_reaction_emoji?: (null | DiscordDefaultReactionEmojiResponse), default_sort_order?: (null | DiscordThreadSortOrder), default_forum_layout?: (null | DiscordForumLayout), default_tag_setting?: (null | DiscordThreadSearchTagSetting), hd_streaming_until?: string | null, hd_streaming_buyer_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordGuildCreateRequest = {description?: string | null, name: string, region?: string | null, icon?: string | null, verification_level?: (null | DiscordVerificationLevels), default_message_notifications?: (null | DiscordUserNotificationSettings), explicit_content_filter?: (null | DiscordGuildExplicitContentFilterTypes), preferred_locale?: (null | DiscordAvailableLocalesEnum), afk_timeout?: (null | DiscordAfkTimeouts), roles?: DiscordCreateGuildRequestRoleItem[] | null, channels?: DiscordCreateGuildRequestChannelItem[] | null, afk_channel_id?: (null | DiscordSnowflakeType), system_channel_id?: (null | DiscordSnowflakeType), system_channel_flags?: number | null};  //object
export type DiscordGuildExplicitContentFilterTypes = (0 | 1 | 2);  //integer
export type DiscordGuildFeatures = ("ANIMATED_BANNER" | "ANIMATED_ICON" | "APPLICATION_COMMAND_PERMISSIONS_V2" | "AUTO_MODERATION" | "BANNER" | "COMMUNITY" | "CREATOR_MONETIZABLE_PROVISIONAL" | "CREATOR_STORE_PAGE" | "DEVELOPER_SUPPORT_SERVER" | "DISCOVERABLE" | "FEATURABLE" | "INVITES_DISABLED" | "INVITE_SPLASH" | "MEMBER_VERIFICATION_GATE_ENABLED" | "MORE_STICKERS" | "NEWS" | "PARTNERED" | "PREVIEW_ENABLED" | "RAID_ALERTS_DISABLED" | "ROLE_ICONS" | "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE" | "ROLE_SUBSCRIPTIONS_ENABLED" | "TICKETED_EVENTS_ENABLED" | "VANITY_URL" | "VERIFIED" | "VIP_REGIONS" | "WELCOME_SCREEN_ENABLED");  //string
export type DiscordGuildHomeSettingsResponse = {guild_id: DiscordSnowflakeType, enabled: boolean, welcome_message?: (null | DiscordWelcomeMessageResponse), new_member_actions?: (null | DiscordNewMemberActionResponse)[] | null, resource_channels?: (null | DiscordResourceChannelResponse)[] | null};  //object
export type DiscordGuildIncomingWebhookResponse = {application_id?: (null | DiscordSnowflakeType), avatar?: string | null, channel_id?: (null | DiscordSnowflakeType), guild_id?: (null | DiscordSnowflakeType), id: DiscordSnowflakeType, name: string, type: (DiscordWebhookTypes), user?: (null | DiscordUserResponse), token?: string | null, url?: string | null};  //object
export type DiscordGuildInviteResponse = {type?: (null | (DiscordInviteTypes)), code: string, inviter?: (null | DiscordUserResponse), max_age?: number | null, created_at?: string | null, expires_at?: string | null, is_contact?: boolean | null, flags?: number | null, guild?: (null | DiscordInviteGuildResponse), guild_id?: (null | DiscordSnowflakeType), channel?: (null | DiscordInviteChannelResponse), target_type?: (null | DiscordInviteTargetTypes), target_user?: (null | DiscordUserResponse), target_application?: (null | DiscordInviteApplicationResponse), guild_scheduled_event?: (null | DiscordScheduledEventResponse), uses?: number | null, max_uses?: number | null, temporary?: boolean | null, approximate_member_count?: number | null, approximate_presence_count?: number | null, is_nickname_changeable?: boolean | null};  //object
export type DiscordGuildMFALevel = (0 | 1);  //integer
export type DiscordGuildMFALevelResponse = {level: DiscordGuildMFALevel};  //object
export type DiscordGuildMemberResponse = {avatar?: string | null, avatar_decoration_data?: (null | DiscordUserAvatarDecorationResponse), banner?: string | null, communication_disabled_until?: string | null, flags: number, joined_at: string, nick?: string | null, pending: boolean, premium_since?: string | null, roles: DiscordSnowflakeType[], user: DiscordUserResponse, mute: boolean, deaf: boolean};  //object
export type DiscordGuildNSFWContentLevel = (0 | 1 | 2 | 3);  //integer
export type DiscordGuildOnboardingMode = (0 | 1);  //integer
export type DiscordGuildOnboardingResponse = {guild_id: DiscordSnowflakeType, prompts: DiscordOnboardingPromptResponse[], default_channel_ids: DiscordSnowflakeType[], enabled: boolean};  //object
export type DiscordGuildPatchRequestPartial = {name?: string, description?: string | null, region?: string | null, icon?: string | null, verification_level?: (null | DiscordVerificationLevels), default_message_notifications?: (null | DiscordUserNotificationSettings), explicit_content_filter?: (null | DiscordGuildExplicitContentFilterTypes), preferred_locale?: (null | DiscordAvailableLocalesEnum), afk_timeout?: (null | DiscordAfkTimeouts), afk_channel_id?: (null | DiscordSnowflakeType), system_channel_id?: (null | DiscordSnowflakeType), owner_id?: DiscordSnowflakeType, splash?: string | null, banner?: string | null, system_channel_flags?: number | null, features?: string | null[] | null, discovery_splash?: string | null, home_header?: string | null, rules_channel_id?: (null | DiscordSnowflakeType), safety_alerts_channel_id?: (null | DiscordSnowflakeType), public_updates_channel_id?: (null | DiscordSnowflakeType), premium_progress_bar_enabled?: boolean | null};  //object
export type DiscordGuildPreviewResponse = {id: DiscordSnowflakeType, name: string, icon?: string | null, description?: string | null, home_header?: string | null, splash?: string | null, discovery_splash?: string | null, features: DiscordGuildFeatures[], approximate_member_count: number, approximate_presence_count: number, emojis: DiscordEmojiResponse[], stickers: DiscordGuildStickerResponse[]};  //object
export type DiscordGuildProductPurchaseResponse = {listing_id: DiscordSnowflakeType, product_name: string};  //object
export type DiscordGuildPruneResponse = {pruned?: number | null};  //object
export type DiscordGuildResponse = {id: DiscordSnowflakeType, name: string, icon?: string | null, description?: string | null, home_header?: string | null, splash?: string | null, discovery_splash?: string | null, features: DiscordGuildFeatures[], banner?: string | null, owner_id: DiscordSnowflakeType, application_id?: (null | DiscordSnowflakeType), region: string, afk_channel_id?: (null | DiscordSnowflakeType), afk_timeout: DiscordAfkTimeouts, system_channel_id?: (null | DiscordSnowflakeType), system_channel_flags: number, widget_enabled: boolean, widget_channel_id?: (null | DiscordSnowflakeType), verification_level: DiscordVerificationLevels, roles: DiscordGuildRoleResponse[], default_message_notifications: DiscordUserNotificationSettings, mfa_level: DiscordGuildMFALevel, explicit_content_filter: DiscordGuildExplicitContentFilterTypes, max_presences?: number | null, max_members?: number | null, max_stage_video_channel_users?: number | null, max_video_channel_users?: number | null, vanity_url_code?: string | null, premium_tier: DiscordPremiumGuildTiers, premium_subscription_count: number, preferred_locale: DiscordAvailableLocalesEnum, rules_channel_id?: (null | DiscordSnowflakeType), safety_alerts_channel_id?: (null | DiscordSnowflakeType), public_updates_channel_id?: (null | DiscordSnowflakeType), premium_progress_bar_enabled: boolean, nsfw: boolean, nsfw_level: DiscordGuildNSFWContentLevel, emojis: DiscordEmojiResponse[], stickers: DiscordGuildStickerResponse[]};  //object
export type DiscordGuildRoleResponse = {id: DiscordSnowflakeType, name: string, description?: string | null, permissions: string, position: number, color: number, hoist: boolean, managed: boolean, mentionable: boolean, icon?: string | null, unicode_emoji?: string | null, tags?: (null | DiscordGuildRoleTagsResponse)};  //object
export type DiscordGuildRoleTagsResponse = {premium_subscriber?: null, bot_id?: (null | DiscordSnowflakeType), integration_id?: (null | DiscordSnowflakeType), subscription_listing_id?: (null | DiscordSnowflakeType), available_for_purchase?: null, guild_connections?: null};  //object
export type DiscordGuildScheduledEventEntityTypes = (0 | 1 | 2 | 3);  //integer
export type DiscordGuildScheduledEventPrivacyLevels = (2);  //integer
export type DiscordGuildScheduledEventStatuses = (1 | 2 | 3 | 4);  //integer
export type DiscordGuildStickerResponse = {id: DiscordSnowflakeType, name: string, tags: string, type: (DiscordStickerTypes), format_type?: (null | DiscordStickerFormatTypes), description?: string | null, available: boolean, guild_id: DiscordSnowflakeType, user?: (null | DiscordUserResponse)};  //object
export type DiscordGuildSubscriptionIntegrationResponse = {type: (DiscordIntegrationTypes), name?: string | null, account?: (null | DiscordAccountResponse), enabled?: boolean | null, id: DiscordSnowflakeType};  //object
export type DiscordGuildTemplateChannelResponse = {id?: number | null, type: (DiscordChannelTypes), name?: string | null, position?: number | null, topic?: string | null, bitrate: number, user_limit: number, nsfw: boolean, rate_limit_per_user: number, parent_id?: (null | DiscordSnowflakeType), default_auto_archive_duration?: (null | DiscordThreadAutoArchiveDuration), permission_overwrites: (null | DiscordChannelPermissionOverwriteResponse)[], available_tags?: DiscordGuildTemplateChannelTags[] | null, template: string, default_reaction_emoji?: (null | DiscordDefaultReactionEmojiResponse), default_thread_rate_limit_per_user?: number | null, default_sort_order?: (null | DiscordThreadSortOrder), default_forum_layout?: (null | DiscordForumLayout), default_tag_setting?: (null | DiscordThreadSearchTagSetting), icon_emoji?: (null | DiscordIconEmojiResponse), theme_color?: number | null};  //object
export type DiscordGuildTemplateChannelTags = {name: string, emoji_id?: (null | DiscordSnowflakeType), emoji_name?: string | null, moderated?: boolean | null};  //object
export type DiscordGuildTemplateResponse = {code: string, name: string, description?: string | null, usage_count: number, creator_id: DiscordSnowflakeType, creator?: (null | DiscordUserResponse), created_at: string, updated_at: string, source_guild_id: DiscordSnowflakeType, serialized_source_guild: DiscordGuildTemplateSnapshotResponse, is_dirty?: boolean | null};  //object
export type DiscordGuildTemplateRoleResponse = {id: number, name: string, permissions: string, color: number, hoist: boolean, mentionable: boolean, icon?: string | null, unicode_emoji?: string | null};  //object
export type DiscordGuildTemplateSnapshotResponse = {name: string, description?: string | null, region?: string | null, verification_level: DiscordVerificationLevels, default_message_notifications: DiscordUserNotificationSettings, explicit_content_filter: DiscordGuildExplicitContentFilterTypes, preferred_locale: DiscordAvailableLocalesEnum, afk_channel_id?: (null | DiscordSnowflakeType), afk_timeout: DiscordAfkTimeouts, system_channel_id?: (null | DiscordSnowflakeType), system_channel_flags: number, roles: DiscordGuildTemplateRoleResponse[], channels: DiscordGuildTemplateChannelResponse[]};  //object
export type DiscordGuildWelcomeChannel = {channel_id: DiscordSnowflakeType, description: string, emoji_id?: (null | DiscordSnowflakeType), emoji_name?: string | null};  //object
export type DiscordGuildWelcomeScreenChannelResponse = {channel_id: DiscordSnowflakeType, description: string, emoji_id?: (null | DiscordSnowflakeType), emoji_name?: string | null};  //object
export type DiscordGuildWelcomeScreenResponse = {description?: string | null, welcome_channels: DiscordGuildWelcomeScreenChannelResponse[]};  //object
export type DiscordGuildWithCountsResponse = {id: DiscordSnowflakeType, name: string, icon?: string | null, description?: string | null, home_header?: string | null, splash?: string | null, discovery_splash?: string | null, features: DiscordGuildFeatures[], banner?: string | null, owner_id: DiscordSnowflakeType, application_id?: (null | DiscordSnowflakeType), region: string, afk_channel_id?: (null | DiscordSnowflakeType), afk_timeout: DiscordAfkTimeouts, system_channel_id?: (null | DiscordSnowflakeType), system_channel_flags: number, widget_enabled: boolean, widget_channel_id?: (null | DiscordSnowflakeType), verification_level: DiscordVerificationLevels, roles: DiscordGuildRoleResponse[], default_message_notifications: DiscordUserNotificationSettings, mfa_level: DiscordGuildMFALevel, explicit_content_filter: DiscordGuildExplicitContentFilterTypes, max_presences?: number | null, max_members?: number | null, max_stage_video_channel_users?: number | null, max_video_channel_users?: number | null, vanity_url_code?: string | null, premium_tier: DiscordPremiumGuildTiers, premium_subscription_count: number, preferred_locale: DiscordAvailableLocalesEnum, rules_channel_id?: (null | DiscordSnowflakeType), safety_alerts_channel_id?: (null | DiscordSnowflakeType), public_updates_channel_id?: (null | DiscordSnowflakeType), premium_progress_bar_enabled: boolean, nsfw: boolean, nsfw_level: DiscordGuildNSFWContentLevel, emojis: DiscordEmojiResponse[], stickers: DiscordGuildStickerResponse[], approximate_member_count?: number | null, approximate_presence_count?: number | null};  //object
export type DiscordIconEmojiResponse = object;  //object
export type DiscordIncomingWebhookInteractionRequest = {content?: string | null, embeds?: DiscordRichEmbed[] | null, allowed_mentions?: (null | DiscordMessageAllowedMentionsRequest), components?: (DiscordActionRowComponentForMessageRequest | DiscordContainerComponentForMessageRequest | DiscordFileComponentForMessageRequest | DiscordMediaGalleryComponentForMessageRequest | DiscordSectionComponentForMessageRequest | DiscordSeparatorComponentForMessageRequest | DiscordTextDisplayComponentForMessageRequest)[] | null, attachments?: DiscordMessageAttachmentRequest[] | null, poll?: (null | DiscordPollCreateRequest), tts?: boolean | null, flags?: number | null};  //object
export type DiscordIncomingWebhookRequestPartial = {content?: string | null, embeds?: DiscordRichEmbed[] | null, allowed_mentions?: (null | DiscordMessageAllowedMentionsRequest), components?: (DiscordActionRowComponentForMessageRequest | DiscordContainerComponentForMessageRequest | DiscordFileComponentForMessageRequest | DiscordMediaGalleryComponentForMessageRequest | DiscordSectionComponentForMessageRequest | DiscordSeparatorComponentForMessageRequest | DiscordTextDisplayComponentForMessageRequest)[] | null, attachments?: DiscordMessageAttachmentRequest[] | null, poll?: (null | DiscordPollCreateRequest), tts?: boolean | null, flags?: number | null, username?: string | null, avatar_url?: string | null, thread_name?: string | null, applied_tags?: DiscordSnowflakeType[] | null};  //object
export type DiscordIncomingWebhookUpdateForInteractionCallbackRequestPartial = {content?: string | null, embeds?: DiscordRichEmbed[] | null, allowed_mentions?: (null | DiscordMessageAllowedMentionsRequest), components?: (DiscordActionRowComponentForMessageRequest | DiscordContainerComponentForMessageRequest | DiscordFileComponentForMessageRequest | DiscordMediaGalleryComponentForMessageRequest | DiscordSectionComponentForMessageRequest | DiscordSeparatorComponentForMessageRequest | DiscordTextDisplayComponentForMessageRequest)[] | null, attachments?: DiscordMessageAttachmentRequest[] | null, flags?: number | null};  //object
export type DiscordIncomingWebhookUpdateRequestPartial = {content?: string | null, embeds?: DiscordRichEmbed[] | null, allowed_mentions?: (null | DiscordMessageAllowedMentionsRequest), components?: (DiscordActionRowComponentForMessageRequest | DiscordContainerComponentForMessageRequest | DiscordFileComponentForMessageRequest | DiscordMediaGalleryComponentForMessageRequest | DiscordSectionComponentForMessageRequest | DiscordSeparatorComponentForMessageRequest | DiscordTextDisplayComponentForMessageRequest)[] | null, attachments?: DiscordMessageAttachmentRequest[] | null, poll?: (null | DiscordPollCreateRequest), flags?: number | null};  //object
export type DiscordInt53Type = number;  //integer
export type DiscordIntegrationApplicationResponse = {id: DiscordSnowflakeType, name: string, icon?: string | null, description: string, type?: (null | DiscordApplicationTypes), cover_image?: string | null, primary_sku_id?: (null | DiscordSnowflakeType), bot?: (null | DiscordUserResponse)};  //object
export type DiscordIntegrationExpireBehaviorTypes = (0 | 1);  //integer
export type DiscordIntegrationExpireGracePeriodTypes = (1 | 3 | 7 | 14 | 30);  //integer
export type DiscordIntegrationTypes = ("discord" | "twitch" | "youtube" | "guild_subscription");  //string
export type DiscordInteractionApplicationCommandAutocompleteCallbackIntegerData = {choices?: (null | DiscordApplicationCommandOptionIntegerChoice)[] | null};  //object
export type DiscordInteractionApplicationCommandAutocompleteCallbackNumberData = {choices?: (null | DiscordApplicationCommandOptionNumberChoice)[] | null};  //object
export type DiscordInteractionApplicationCommandAutocompleteCallbackStringData = {choices?: (null | DiscordApplicationCommandOptionStringChoice)[] | null};  //object
export type DiscordInteractionCallbackResponse = {interaction: DiscordInteractionResponse, resource?: (DiscordCreateMessageInteractionCallbackResponse | DiscordLaunchActivityInteractionCallbackResponse | DiscordUpdateMessageInteractionCallbackResponse | null)};  //object
export type DiscordInteractionCallbackTypes = (1 | 4 | 5 | 6 | 7 | 8 | 9 | 12);  //integer
export type DiscordInteractionContextType = (0 | 1 | 2);  //integer
export type DiscordInteractionResponse = {id: DiscordSnowflakeType, type: DiscordInteractionTypes, response_message_id?: (null | DiscordSnowflakeType), response_message_loading?: boolean | null, response_message_ephemeral?: boolean | null, channel_id?: (null | DiscordSnowflakeType), guild_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordInteractionTypes = (1 | 2 | 3 | 4 | 5);  //integer
export type DiscordInviteApplicationResponse = {id: DiscordSnowflakeType, name: string, icon?: string | null, description: string, type?: (null | DiscordApplicationTypes), cover_image?: string | null, primary_sku_id?: (null | DiscordSnowflakeType), bot?: (null | DiscordUserResponse), slug?: string | null, guild_id?: (null | DiscordSnowflakeType), rpc_origins?: string | null[] | null, bot_public?: boolean | null, bot_require_code_grant?: boolean | null, terms_of_service_url?: string | null, privacy_policy_url?: string | null, custom_install_url?: string | null, install_params?: (null | DiscordApplicationOAuth2InstallParamsResponse), integration_types_config?: object | null, verify_key: string, flags: number, max_participants?: number | null, tags?: string[] | null};  //object
export type DiscordInviteChannelRecipientResponse = {username: string};  //object
export type DiscordInviteChannelResponse = {id: DiscordSnowflakeType, type: DiscordChannelTypes, name?: string | null, icon?: string | null, recipients?: DiscordInviteChannelRecipientResponse[] | null};  //object
export type DiscordInviteGuildResponse = {id: DiscordSnowflakeType, name: string, splash?: string | null, banner?: string | null, description?: string | null, icon?: string | null, features: DiscordGuildFeatures[], verification_level?: (null | DiscordVerificationLevels), vanity_url_code?: string | null, nsfw_level?: (null | DiscordGuildNSFWContentLevel), nsfw?: boolean | null, premium_subscription_count?: number | null};  //object
export type DiscordInviteTargetTypes = (1 | 2 | 3);  //integer
export type DiscordInviteTypes = (0 | 1 | 2);  //integer
export type DiscordKeywordRuleResponse = {id: DiscordSnowflakeType, guild_id: DiscordSnowflakeType, creator_id: DiscordSnowflakeType, name: string, event_type: DiscordAutomodEventType, actions: (DiscordBlockMessageActionResponse | DiscordFlagToChannelActionResponse | DiscordQuarantineUserActionResponse | DiscordUserCommunicationDisabledActionResponse)[], trigger_type: (DiscordAutomodTriggerType), enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_metadata: DiscordKeywordTriggerMetadataResponse};  //object
export type DiscordKeywordTriggerMetadata = {keyword_filter?: string[] | null, regex_patterns?: string[] | null, allow_list?: string[] | null};  //object
export type DiscordKeywordTriggerMetadataResponse = {keyword_filter: string[], regex_patterns: string[], allow_list: string[]};  //object
export type DiscordKeywordUpsertRequest = {name: string, event_type: DiscordAutomodEventType, actions?: (DiscordBlockMessageAction | DiscordFlagToChannelAction | DiscordQuarantineUserAction | DiscordUserCommunicationDisabledAction)[] | null, enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_type: (DiscordAutomodTriggerType), trigger_metadata?: (null | DiscordKeywordTriggerMetadata)};  //object
export type DiscordKeywordUpsertRequestPartial = {name?: string, event_type?: DiscordAutomodEventType, actions?: (DiscordBlockMessageAction | DiscordFlagToChannelAction | DiscordQuarantineUserAction | DiscordUserCommunicationDisabledAction)[] | null, enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_type?: (DiscordAutomodTriggerType), trigger_metadata?: (null | DiscordKeywordTriggerMetadata)};  //object
export type DiscordLaunchActivityInteractionCallbackRequest = {type: (DiscordInteractionCallbackTypes)};  //object
export type DiscordLaunchActivityInteractionCallbackResponse = {type: (DiscordInteractionCallbackTypes)};  //object
export type DiscordListApplicationEmojisResponse = {items: DiscordEmojiResponse[]};  //object
export type DiscordListGuildSoundboardSoundsResponse = {items: DiscordSoundboardSoundResponse[]};  //object
export type DiscordLobbyMemberRequest = {id: DiscordSnowflakeType, metadata?: object | null, flags?: (null | number)};  //object
export type DiscordLobbyMemberResponse = {id: DiscordSnowflakeType, metadata?: object | null, flags: number};  //object
export type DiscordLobbyMessageResponse = {id: DiscordSnowflakeType, type: DiscordMessageType, content: string, lobby_id: DiscordSnowflakeType, channel_id: DiscordSnowflakeType, author: DiscordUserResponse, metadata?: object | null, flags: number, application_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordLobbyResponse = {id: DiscordSnowflakeType, application_id: DiscordSnowflakeType, metadata?: object | null, members?: DiscordLobbyMemberResponse[] | null, linked_channel?: (null | DiscordGuildChannelResponse)};  //object
export type DiscordMLSpamRuleResponse = {id: DiscordSnowflakeType, guild_id: DiscordSnowflakeType, creator_id: DiscordSnowflakeType, name: string, event_type: DiscordAutomodEventType, actions: (DiscordBlockMessageActionResponse | DiscordFlagToChannelActionResponse | DiscordQuarantineUserActionResponse | DiscordUserCommunicationDisabledActionResponse)[], trigger_type: (DiscordAutomodTriggerType), enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_metadata: DiscordMLSpamTriggerMetadataResponse};  //object
export type DiscordMLSpamTriggerMetadata = object;  //object
export type DiscordMLSpamTriggerMetadataResponse = object;  //object
export type DiscordMLSpamUpsertRequest = {name: string, event_type: DiscordAutomodEventType, actions?: (DiscordBlockMessageAction | DiscordFlagToChannelAction | DiscordQuarantineUserAction | DiscordUserCommunicationDisabledAction)[] | null, enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_type: (DiscordAutomodTriggerType), trigger_metadata?: (null | DiscordMLSpamTriggerMetadata)};  //object
export type DiscordMLSpamUpsertRequestPartial = {name?: string, event_type?: DiscordAutomodEventType, actions?: (DiscordBlockMessageAction | DiscordFlagToChannelAction | DiscordQuarantineUserAction | DiscordUserCommunicationDisabledAction)[] | null, enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_type?: (DiscordAutomodTriggerType), trigger_metadata?: (null | DiscordMLSpamTriggerMetadata)};  //object
export type DiscordMediaGalleryComponentForMessageRequest = {type: (DiscordMessageComponentTypes), items: DiscordMediaGalleryItemRequest[]};  //object
export type DiscordMediaGalleryComponentResponse = {type: (DiscordMessageComponentTypes), id: number, items: DiscordMediaGalleryItemResponse[]};  //object
export type DiscordMediaGalleryItemRequest = {description?: string | null, spoiler?: boolean | null, media: DiscordUnfurledMediaRequest};  //object
export type DiscordMediaGalleryItemResponse = {media: DiscordUnfurledMediaResponse, description?: string | null, spoiler: boolean};  //object
export type DiscordMentionSpamRuleResponse = {id: DiscordSnowflakeType, guild_id: DiscordSnowflakeType, creator_id: DiscordSnowflakeType, name: string, event_type: DiscordAutomodEventType, actions: (DiscordBlockMessageActionResponse | DiscordFlagToChannelActionResponse | DiscordQuarantineUserActionResponse | DiscordUserCommunicationDisabledActionResponse)[], trigger_type: (DiscordAutomodTriggerType), enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_metadata: DiscordMentionSpamTriggerMetadataResponse};  //object
export type DiscordMentionSpamTriggerMetadata = {mention_total_limit: number, mention_raid_protection_enabled?: boolean | null};  //object
export type DiscordMentionSpamTriggerMetadataResponse = {mention_total_limit: number, mention_raid_protection_enabled?: boolean | null};  //object
export type DiscordMentionSpamUpsertRequest = {name: string, event_type: DiscordAutomodEventType, actions?: (DiscordBlockMessageAction | DiscordFlagToChannelAction | DiscordQuarantineUserAction | DiscordUserCommunicationDisabledAction)[] | null, enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_type: (DiscordAutomodTriggerType), trigger_metadata?: (null | DiscordMentionSpamTriggerMetadata)};  //object
export type DiscordMentionSpamUpsertRequestPartial = {name?: string, event_type?: DiscordAutomodEventType, actions?: (DiscordBlockMessageAction | DiscordFlagToChannelAction | DiscordQuarantineUserAction | DiscordUserCommunicationDisabledAction)[] | null, enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_type?: (DiscordAutomodTriggerType), trigger_metadata?: (null | DiscordMentionSpamTriggerMetadata)};  //object
export type DiscordMentionableSelectComponentForMessageRequest = {type: (DiscordMessageComponentTypes), custom_id: string, placeholder?: string | null, min_values?: number | null, max_values?: number | null, disabled?: boolean | null, default_values?: (DiscordRoleSelectDefaultValue | DiscordUserSelectDefaultValue)[] | null};  //object
export type DiscordMentionableSelectComponentResponse = {type: (DiscordMessageComponentTypes), id: number, custom_id: string, placeholder?: string | null, min_values?: number | null, max_values?: number | null, disabled?: boolean | null, default_values?: (DiscordRoleSelectDefaultValueResponse | DiscordUserSelectDefaultValueResponse)[] | null};  //object
export type DiscordMessageActivityResponse = object;  //object
export type DiscordMessageAllowedMentionsRequest = {parse?: (null | DiscordAllowedMentionTypes)[] | null, users?: (null | DiscordSnowflakeType)[] | null, roles?: (null | DiscordSnowflakeType)[] | null, replied_user?: boolean | null};  //object
export type DiscordMessageAttachmentRequest = {id: DiscordSnowflakeType, filename?: string | null, description?: string | null, duration_secs?: number | null, waveform?: string | null, title?: string | null, is_remix?: boolean | null};  //object
export type DiscordMessageAttachmentResponse = {id: DiscordSnowflakeType, filename: string, size: number, url: string, proxy_url: string, width?: number | null, height?: number | null, duration_secs?: number | null, waveform?: string | null, description?: string | null, content_type?: string | null, ephemeral?: boolean | null, title?: string | null, application?: (null | DiscordApplicationResponse), clip_created_at?: string | null, clip_participants?: DiscordUserResponse[] | null};  //object
export type DiscordMessageCallResponse = {ended_timestamp?: string | null, participants: DiscordSnowflakeType[]};  //object
export type DiscordMessageComponentInteractionMetadataResponse = {id: DiscordSnowflakeType, type: (DiscordInteractionTypes), user?: (null | DiscordUserResponse), authorizing_integration_owners: object, original_response_message_id?: (null | DiscordSnowflakeType), interacted_message_id: DiscordSnowflakeType};  //object
export type DiscordMessageComponentSeparatorSpacingSize = (1 | 2);  //integer
export type DiscordMessageComponentTypes = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 17);  //integer
export type DiscordMessageCreateRequest = {content?: string | null, embeds?: DiscordRichEmbed[] | null, allowed_mentions?: (null | DiscordMessageAllowedMentionsRequest), sticker_ids?: DiscordSnowflakeType[] | null, components?: (DiscordActionRowComponentForMessageRequest | DiscordContainerComponentForMessageRequest | DiscordFileComponentForMessageRequest | DiscordMediaGalleryComponentForMessageRequest | DiscordSectionComponentForMessageRequest | DiscordSeparatorComponentForMessageRequest | DiscordTextDisplayComponentForMessageRequest)[] | null, flags?: number | null, attachments?: DiscordMessageAttachmentRequest[] | null, poll?: (null | DiscordPollCreateRequest), confetti_potion?: (null | DiscordConfettiPotionCreateRequest), message_reference?: (null | DiscordMessageReferenceRequest), nonce?: (number | string | null), enforce_nonce?: boolean | null, tts?: boolean | null};  //object
export type DiscordMessageEditRequestPartial = {content?: string | null, embeds?: DiscordRichEmbed[] | null, flags?: number | null, allowed_mentions?: (null | DiscordMessageAllowedMentionsRequest), sticker_ids?: DiscordSnowflakeType[] | null, components?: (DiscordActionRowComponentForMessageRequest | DiscordContainerComponentForMessageRequest | DiscordFileComponentForMessageRequest | DiscordMediaGalleryComponentForMessageRequest | DiscordSectionComponentForMessageRequest | DiscordSeparatorComponentForMessageRequest | DiscordTextDisplayComponentForMessageRequest)[] | null, attachments?: DiscordMessageAttachmentRequest[] | null};  //object
export type DiscordMessageEmbedAuthorResponse = {name: string, url?: string | null, icon_url?: string | null, proxy_icon_url?: string | null};  //object
export type DiscordMessageEmbedFieldResponse = {name: string, value: string, inline: boolean};  //object
export type DiscordMessageEmbedFooterResponse = {text: string, icon_url?: string | null, proxy_icon_url?: string | null};  //object
export type DiscordMessageEmbedImageResponse = {url?: string | null, proxy_url?: string | null, width?: (null | DiscordUInt32Type), height?: (null | DiscordUInt32Type), placeholder?: string | null, placeholder_version?: (null | DiscordUInt32Type), description?: string | null, flags?: (null | DiscordUInt32Type)};  //object
export type DiscordMessageEmbedProviderResponse = {name: string, url?: string | null};  //object
export type DiscordMessageEmbedResponse = {type: string, url?: string | null, title?: string | null, description?: string | null, color?: number | null, timestamp?: string | null, fields?: DiscordMessageEmbedFieldResponse[] | null, author?: (null | DiscordMessageEmbedAuthorResponse), provider?: (null | DiscordMessageEmbedProviderResponse), image?: (null | DiscordMessageEmbedImageResponse), thumbnail?: (null | DiscordMessageEmbedImageResponse), video?: (null | DiscordMessageEmbedVideoResponse), footer?: (null | DiscordMessageEmbedFooterResponse)};  //object
export type DiscordMessageEmbedVideoResponse = {url?: string | null, proxy_url?: string | null, width?: (null | DiscordUInt32Type), height?: (null | DiscordUInt32Type), placeholder?: string | null, placeholder_version?: (null | DiscordUInt32Type), description?: string | null, flags?: (null | DiscordUInt32Type)};  //object
export type DiscordMessageInteractionResponse = {id: DiscordSnowflakeType, type: DiscordInteractionTypes, name: string, user?: (null | DiscordUserResponse), name_localized?: string | null};  //object
export type DiscordMessageMentionChannelResponse = {id: DiscordSnowflakeType, name: string, type: DiscordChannelTypes, guild_id: DiscordSnowflakeType};  //object
export type DiscordMessageReactionCountDetailsResponse = {burst: number, normal: number};  //object
export type DiscordMessageReactionEmojiResponse = {id?: (null | DiscordSnowflakeType), name?: string | null, animated?: boolean | null};  //object
export type DiscordMessageReactionResponse = {emoji: DiscordMessageReactionEmojiResponse, count: number, count_details: DiscordMessageReactionCountDetailsResponse, burst_colors: string[], me_burst: boolean, me: boolean};  //object
export type DiscordMessageReferenceRequest = {guild_id?: (null | DiscordSnowflakeType), channel_id?: (null | DiscordSnowflakeType), message_id: DiscordSnowflakeType, fail_if_not_exists?: boolean | null, type?: (null | DiscordMessageReferenceType)};  //object
export type DiscordMessageReferenceResponse = {type?: (null | DiscordMessageReferenceType), channel_id: DiscordSnowflakeType, message_id?: (null | DiscordSnowflakeType), guild_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordMessageReferenceType = (0);  //integer
export type DiscordMessageResponse = {type: DiscordMessageType, content: string, mentions: DiscordUserResponse[], mention_roles: DiscordSnowflakeType[], attachments: DiscordMessageAttachmentResponse[], embeds: DiscordMessageEmbedResponse[], timestamp: string, edited_timestamp?: string | null, flags: number, components: (DiscordActionRowComponentResponse | DiscordContainerComponentResponse | DiscordFileComponentResponse | DiscordMediaGalleryComponentResponse | DiscordSectionComponentResponse | DiscordSeparatorComponentResponse | DiscordTextDisplayComponentResponse)[], resolved?: (null | DiscordResolvedObjectsResponse), stickers?: (DiscordGuildStickerResponse | DiscordStandardStickerResponse)[] | null, sticker_items?: DiscordMessageStickerItemResponse[] | null, id: DiscordSnowflakeType, channel_id: DiscordSnowflakeType, author: DiscordUserResponse, pinned: boolean, mention_everyone: boolean, tts: boolean, call?: (null | DiscordMessageCallResponse), activity?: (null | DiscordMessageActivityResponse), application?: (null | DiscordBasicApplicationResponse), application_id?: (null | DiscordSnowflakeType), interaction?: (null | DiscordMessageInteractionResponse), nonce?: (number | string | null), webhook_id?: (null | DiscordSnowflakeType), message_reference?: (null | DiscordMessageReferenceResponse), thread?: (null | DiscordThreadResponse), mention_channels?: (null | DiscordMessageMentionChannelResponse)[] | null, role_subscription_data?: (null | DiscordMessageRoleSubscriptionDataResponse), purchase_notification?: (null | DiscordPurchaseNotificationResponse), position?: number | null, poll?: (null | DiscordPollResponse), interaction_metadata?: (DiscordApplicationCommandInteractionMetadataResponse | DiscordMessageComponentInteractionMetadataResponse | DiscordModalSubmitInteractionMetadataResponse | null), message_snapshots?: DiscordMessageSnapshotResponse[] | null, reactions?: DiscordMessageReactionResponse[] | null, referenced_message?: (null | DiscordBasicMessageResponse)};  //object
export type DiscordMessageRoleSubscriptionDataResponse = {role_subscription_listing_id: DiscordSnowflakeType, tier_name: string, total_months_subscribed: number, is_renewal: boolean};  //object
export type DiscordMessageSnapshotResponse = {message?: (null | DiscordMinimalContentMessageResponse)};  //object
export type DiscordMessageStickerItemResponse = {id: DiscordSnowflakeType, name: string, format_type: DiscordStickerFormatTypes};  //object
export type DiscordMessageType = (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 31 | 32 | 36 | 37 | 38 | 39 | 46 | 55);  //integer
export type DiscordMetadataItemTypes = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8);  //integer
export type DiscordMinimalContentMessageResponse = {type: DiscordMessageType, content: string, mentions: DiscordUserResponse[], mention_roles: DiscordSnowflakeType[], attachments: DiscordMessageAttachmentResponse[], embeds: DiscordMessageEmbedResponse[], timestamp: string, edited_timestamp?: string | null, flags: number, components: (DiscordActionRowComponentResponse | DiscordContainerComponentResponse | DiscordFileComponentResponse | DiscordMediaGalleryComponentResponse | DiscordSectionComponentResponse | DiscordSeparatorComponentResponse | DiscordTextDisplayComponentResponse)[], resolved?: (null | DiscordResolvedObjectsResponse), stickers?: (DiscordGuildStickerResponse | DiscordStandardStickerResponse)[] | null, sticker_items?: DiscordMessageStickerItemResponse[] | null};  //object
export type DiscordModalInteractionCallbackRequest = {type: (DiscordInteractionCallbackTypes), data: DiscordModalInteractionCallbackRequestData};  //object
export type DiscordModalInteractionCallbackRequestData = {custom_id: string, title: string, components: DiscordActionRowComponentForModalRequest[]};  //object
export type DiscordModalSubmitInteractionMetadataResponse = {id: DiscordSnowflakeType, type: (DiscordInteractionTypes), user?: (null | DiscordUserResponse), authorizing_integration_owners: object, original_response_message_id?: (null | DiscordSnowflakeType), triggering_interaction_metadata: (DiscordApplicationCommandInteractionMetadataResponse | DiscordMessageComponentInteractionMetadataResponse)};  //object
export type DiscordMyGuildResponse = {id: DiscordSnowflakeType, name: string, icon?: string | null, banner?: string | null, owner: boolean, permissions: string, features: DiscordGuildFeatures[], approximate_member_count?: number | null, approximate_presence_count?: number | null};  //object
export type DiscordNameplatePalette = string;  //string
export type DiscordNewMemberActionResponse = {channel_id: DiscordSnowflakeType, action_type: DiscordNewMemberActionType, title: string, description: string, emoji?: (null | DiscordSettingsEmojiResponse), icon?: string | null};  //object
export type DiscordNewMemberActionType = (0 | 1);  //integer
export type DiscordOAuth2GetAuthorizationResponse = {application: DiscordApplicationResponse, expires: string, scopes: DiscordOAuth2Scopes[], user?: (null | DiscordUserResponse)};  //object
export type DiscordOAuth2GetKeys = {keys: DiscordOAuth2Key[]};  //object
export type DiscordOAuth2GetOpenIDConnectUserInfoResponse = {sub: string, email?: string | null, email_verified?: boolean | null, preferred_username?: string | null, nickname?: string | null, picture?: string | null, locale?: string | null};  //object
export type DiscordOAuth2Key = {kty: string, use: string, kid: string, n: string, e: string, alg: string};  //object
export type DiscordOAuth2Scopes = ("identify" | "email" | "connections" | "guilds" | "guilds.join" | "guilds.members.read" | "gdm.join" | "bot" | "rpc" | "rpc.notifications.read" | "rpc.voice.read" | "rpc.voice.write" | "rpc.video.read" | "rpc.video.write" | "rpc.screenshare.read" | "rpc.screenshare.write" | "rpc.activities.write" | "webhook.incoming" | "messages.read" | "applications.builds.upload" | "applications.builds.read" | "applications.commands" | "applications.commands.permissions.update" | "applications.commands.update" | "applications.store.update" | "applications.entitlements" | "activities.read" | "activities.write" | "activities.invites.write" | "relationships.read" | "voice" | "dm_channels.read" | "role_connections.write" | "openid");  //string
export type DiscordOnboardingPromptOptionRequest = {id?: (null | DiscordSnowflakeType), title: string, description?: string | null, emoji_id?: (null | DiscordSnowflakeType), emoji_name?: string | null, emoji_animated?: boolean | null, role_ids?: DiscordSnowflakeType[] | null, channel_ids?: DiscordSnowflakeType[] | null};  //object
export type DiscordOnboardingPromptOptionResponse = {id: DiscordSnowflakeType, title: string, description: string, emoji: DiscordSettingsEmojiResponse, role_ids: DiscordSnowflakeType[], channel_ids: DiscordSnowflakeType[]};  //object
export type DiscordOnboardingPromptResponse = {id: DiscordSnowflakeType, title: string, options: DiscordOnboardingPromptOptionResponse[], single_select: boolean, required: boolean, in_onboarding: boolean, type: DiscordOnboardingPromptType};  //object
export type DiscordOnboardingPromptType = (0 | 1);  //integer
export type DiscordPartialDiscordIntegrationResponse = {id: DiscordSnowflakeType, type: (DiscordIntegrationTypes), name?: string | null, account?: (null | DiscordAccountResponse), application_id: DiscordSnowflakeType};  //object
export type DiscordPartialExternalConnectionIntegrationResponse = {id: DiscordSnowflakeType, type: (DiscordIntegrationTypes), name?: string | null, account?: (null | DiscordAccountResponse)};  //object
export type DiscordPartialGuildSubscriptionIntegrationResponse = {id: DiscordSnowflakeType, type: (DiscordIntegrationTypes), name?: string | null, account?: (null | DiscordAccountResponse)};  //object
export type DiscordPollAnswerCreateRequest = {poll_media: DiscordPollMediaCreateRequest};  //object
export type DiscordPollAnswerDetailsResponse = {users?: DiscordUserResponse[] | null};  //object
export type DiscordPollAnswerResponse = {answer_id: number, poll_media: DiscordPollMediaResponse};  //object
export type DiscordPollCreateRequest = {question: DiscordPollMedia, answers: DiscordPollAnswerCreateRequest[], allow_multiselect?: boolean | null, layout_type?: (null | DiscordPollLayoutTypes), duration?: number | null};  //object
export type DiscordPollEmoji = {id?: (null | DiscordSnowflakeType), name?: string | null, animated?: boolean | null};  //object
export type DiscordPollEmojiCreateRequest = {id?: (null | DiscordSnowflakeType), name?: string | null, animated?: boolean | null};  //object
export type DiscordPollLayoutTypes = number;  //integer
export type DiscordPollMedia = {text?: string | null, emoji?: (null | DiscordPollEmoji)};  //object
export type DiscordPollMediaCreateRequest = {text?: string | null, emoji?: (null | DiscordPollEmojiCreateRequest)};  //object
export type DiscordPollMediaResponse = {text?: string | null, emoji?: (null | DiscordMessageReactionEmojiResponse)};  //object
export type DiscordPollResponse = {question: DiscordPollMediaResponse, answers: DiscordPollAnswerResponse[], expiry: string, allow_multiselect: boolean, layout_type: DiscordPollLayoutTypes, results: DiscordPollResultsResponse};  //object
export type DiscordPollResultsEntryResponse = {id: number, count: number, me_voted?: boolean | null};  //object
export type DiscordPollResultsResponse = {answer_counts?: DiscordPollResultsEntryResponse[] | null, is_finalized: boolean};  //object
export type DiscordPongInteractionCallbackRequest = {type: (DiscordInteractionCallbackTypes)};  //object
export type DiscordPremiumGuildTiers = (0 | 1 | 2 | 3);  //integer
export type DiscordPremiumTypes = (0 | 1 | 2 | 3);  //integer
export type DiscordPrivateApplicationResponse = {id: DiscordSnowflakeType, name: string, icon?: string | null, description: string, type?: (null | DiscordApplicationTypes), cover_image?: string | null, primary_sku_id?: (null | DiscordSnowflakeType), bot?: (null | DiscordUserResponse), slug?: string | null, guild_id?: (null | DiscordSnowflakeType), rpc_origins?: string | null[] | null, bot_public?: boolean | null, bot_require_code_grant?: boolean | null, terms_of_service_url?: string | null, privacy_policy_url?: string | null, custom_install_url?: string | null, install_params?: (null | DiscordApplicationOAuth2InstallParamsResponse), integration_types_config?: object | null, verify_key: string, flags: number, max_participants?: number | null, tags?: string[] | null, redirect_uris: string | null[], interactions_endpoint_url?: string | null, role_connections_verification_url?: string | null, owner: DiscordUserResponse, approximate_guild_count?: number | null, approximate_user_install_count: number, explicit_content_filter: DiscordApplicationExplicitContentFilterTypes, team?: (null | DiscordTeamResponse)};  //object
export type DiscordPrivateChannelLocation = {id: string, kind: (DiscordEmbeddedActivityLocationKind), channel_id: DiscordSnowflakeType};  //object
export type DiscordPrivateChannelResponse = {id: DiscordSnowflakeType, type: (DiscordChannelTypes), last_message_id?: (null | DiscordSnowflakeType), flags: number, last_pin_timestamp?: string | null, recipients: DiscordUserResponse[]};  //object
export type DiscordPrivateGroupChannelResponse = {id: DiscordSnowflakeType, type: (DiscordChannelTypes), last_message_id?: (null | DiscordSnowflakeType), flags: number, last_pin_timestamp?: string | null, recipients: DiscordUserResponse[], name?: string | null, icon?: string | null, owner_id?: (null | DiscordSnowflakeType), managed?: boolean | null, application_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordPrivateGuildMemberResponse = {avatar?: string | null, avatar_decoration_data?: (null | DiscordUserAvatarDecorationResponse), banner?: string | null, communication_disabled_until?: string | null, flags: number, joined_at: string, nick?: string | null, pending: boolean, premium_since?: string | null, roles: DiscordSnowflakeType[], user: DiscordUserResponse, mute: boolean, deaf: boolean};  //object
export type DiscordProvisionalTokenResponse = {token_type: string, access_token: string, expires_in: number, scope: string, id_token: string, refresh_token?: string | null, scopes?: string[] | null, expires_at_s?: number | null};  //object
export type DiscordPurchaseNotificationResponse = {type: DiscordPurchaseType, guild_product_purchase?: (null | DiscordGuildProductPurchaseResponse)};  //object
export type DiscordPurchaseType = (0);  //integer
export type DiscordQuarantineUserAction = {type: (DiscordAutomodActionType), metadata?: (null | DiscordQuarantineUserActionMetadata)};  //object
export type DiscordQuarantineUserActionMetadata = object;  //object
export type DiscordQuarantineUserActionMetadataResponse = object;  //object
export type DiscordQuarantineUserActionResponse = {type: (DiscordAutomodActionType), metadata: DiscordQuarantineUserActionMetadataResponse};  //object
export type DiscordReactionTypes = (0 | 1);  //integer
export type DiscordResolvedObjectsResponse = {users: object, members: object, channels: object, roles: object};  //object
export type DiscordResourceChannelResponse = {channel_id: DiscordSnowflakeType, title: string, emoji?: (null | DiscordSettingsEmojiResponse), icon?: string | null, description: string};  //object
export type DiscordRichEmbed = {type?: string | null, url?: string | null, title?: string | null, color?: number | null, timestamp?: string | null, description?: string | null, author?: (null | DiscordRichEmbedAuthor), image?: (null | DiscordRichEmbedImage), thumbnail?: (null | DiscordRichEmbedThumbnail), footer?: (null | DiscordRichEmbedFooter), fields?: DiscordRichEmbedField[] | null, provider?: (null | DiscordRichEmbedProvider), video?: (null | DiscordRichEmbedVideo)};  //object
export type DiscordRichEmbedAuthor = {name?: string | null, url?: string | null, icon_url?: string | null};  //object
export type DiscordRichEmbedField = {name: string, value: string, inline?: boolean | null};  //object
export type DiscordRichEmbedFooter = {text?: string | null, icon_url?: string | null};  //object
export type DiscordRichEmbedImage = {url?: string | null, width?: number | null, height?: number | null, placeholder?: string | null, placeholder_version?: number | null, is_animated?: boolean | null, description?: string | null};  //object
export type DiscordRichEmbedProvider = {name?: string | null, url?: string | null};  //object
export type DiscordRichEmbedThumbnail = {url?: string | null, width?: number | null, height?: number | null, placeholder?: string | null, placeholder_version?: number | null, is_animated?: boolean | null, description?: string | null};  //object
export type DiscordRichEmbedVideo = {url?: string | null, width?: number | null, height?: number | null, placeholder?: string | null, placeholder_version?: number | null, is_animated?: boolean | null, description?: string | null};  //object
export type DiscordRoleSelectComponentForMessageRequest = {type: (DiscordMessageComponentTypes), custom_id: string, placeholder?: string | null, min_values?: number | null, max_values?: number | null, disabled?: boolean | null, default_values?: DiscordRoleSelectDefaultValue[] | null};  //object
export type DiscordRoleSelectComponentResponse = {type: (DiscordMessageComponentTypes), id: number, custom_id: string, placeholder?: string | null, min_values?: number | null, max_values?: number | null, disabled?: boolean | null, default_values?: DiscordRoleSelectDefaultValueResponse[] | null};  //object
export type DiscordRoleSelectDefaultValue = {type: (DiscordSnowflakeSelectDefaultValueTypes), id: DiscordSnowflakeType};  //object
export type DiscordRoleSelectDefaultValueResponse = {type: (DiscordSnowflakeSelectDefaultValueTypes), id: DiscordSnowflakeType};  //object
export type DiscordSDKMessageRequest = {content?: string | null, embeds?: DiscordRichEmbed[] | null, allowed_mentions?: (null | DiscordMessageAllowedMentionsRequest), sticker_ids?: DiscordSnowflakeType[] | null, components?: (DiscordActionRowComponentForMessageRequest | DiscordContainerComponentForMessageRequest | DiscordFileComponentForMessageRequest | DiscordMediaGalleryComponentForMessageRequest | DiscordSectionComponentForMessageRequest | DiscordSeparatorComponentForMessageRequest | DiscordTextDisplayComponentForMessageRequest)[] | null, flags?: number | null, attachments?: DiscordMessageAttachmentRequest[] | null, poll?: (null | DiscordPollCreateRequest), confetti_potion?: (null | DiscordConfettiPotionCreateRequest), message_reference?: (null | DiscordMessageReferenceRequest), nonce?: (number | string | null), enforce_nonce?: boolean | null, tts?: boolean | null};  //object
export type DiscordScheduledEventResponse = {id: DiscordSnowflakeType, guild_id: DiscordSnowflakeType, name: string, description?: string | null, channel_id?: (null | DiscordSnowflakeType), creator_id?: (null | DiscordSnowflakeType), creator?: (null | DiscordUserResponse), image?: string | null, scheduled_start_time: string, scheduled_end_time?: string | null, status: DiscordGuildScheduledEventStatuses, entity_type: DiscordGuildScheduledEventEntityTypes, entity_id?: (null | DiscordSnowflakeType), user_count?: number | null, privacy_level: DiscordGuildScheduledEventPrivacyLevels, user_rsvp?: (null | DiscordScheduledEventUserResponse)};  //object
export type DiscordScheduledEventUserResponse = {guild_scheduled_event_id: DiscordSnowflakeType, user_id: DiscordSnowflakeType, user?: (null | DiscordUserResponse), member?: (null | DiscordGuildMemberResponse)};  //object
export type DiscordSectionComponentForMessageRequest = {type: (DiscordMessageComponentTypes), components: DiscordTextDisplayComponentForMessageRequest[], accessory: (DiscordButtonComponentForMessageRequest | DiscordThumbnailComponentForMessageRequest)};  //object
export type DiscordSectionComponentResponse = {type: (DiscordMessageComponentTypes), id: number, components: DiscordTextDisplayComponentResponse[], accessory: (DiscordButtonComponentResponse | DiscordThumbnailComponentResponse)};  //object
export type DiscordSeparatorComponentForMessageRequest = {type: (DiscordMessageComponentTypes), spacing?: (null | DiscordMessageComponentSeparatorSpacingSize), divider?: boolean | null};  //object
export type DiscordSeparatorComponentResponse = {type: (DiscordMessageComponentTypes), id: number, spacing: DiscordMessageComponentSeparatorSpacingSize, divider: boolean};  //object
export type DiscordSettingsEmojiResponse = {id?: (null | DiscordSnowflakeType), name?: string | null, animated?: boolean | null};  //object
export type DiscordSlackWebhook = {text?: string | null, username?: string | null, icon_url?: string | null, attachments?: DiscordWebhookSlackEmbed[] | null};  //object
export type DiscordSnowflakeSelectDefaultValueTypes = ("user" | "role" | "channel");  //string
export type DiscordSnowflakeType = `${number}`; //Type overwrite more precise
export type DiscordSortingOrder = ("asc" | "desc");  //string
export type DiscordSoundboardCreateRequest = {name: string, volume?: number | null, emoji_id?: (null | DiscordSnowflakeType), emoji_name?: string | null, sound: string};  //object
export type DiscordSoundboardPatchRequestPartial = {name?: string, volume?: number | null, emoji_id?: (null | DiscordSnowflakeType), emoji_name?: string | null};  //object
export type DiscordSoundboardSoundResponse = {name: string, sound_id: DiscordSnowflakeType, volume: number, emoji_id?: (null | DiscordSnowflakeType), emoji_name?: string | null, guild_id?: (null | DiscordSnowflakeType), available: boolean, user?: (null | DiscordUserResponse)};  //object
export type DiscordSoundboardSoundSendRequest = {sound_id: DiscordSnowflakeType, source_guild_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordSpamLinkRuleResponse = {id: DiscordSnowflakeType, guild_id: DiscordSnowflakeType, creator_id: DiscordSnowflakeType, name: string, event_type: DiscordAutomodEventType, actions: (DiscordBlockMessageActionResponse | DiscordFlagToChannelActionResponse | DiscordQuarantineUserActionResponse | DiscordUserCommunicationDisabledActionResponse)[], trigger_type: (DiscordAutomodTriggerType), enabled?: boolean | null, exempt_roles?: DiscordSnowflakeType[] | null, exempt_channels?: DiscordSnowflakeType[] | null, trigger_metadata: DiscordSpamLinkTriggerMetadataResponse};  //object
export type DiscordSpamLinkTriggerMetadataResponse = object;  //object
export type DiscordStageInstanceResponse = {guild_id: DiscordSnowflakeType, channel_id: DiscordSnowflakeType, topic: string, privacy_level: DiscordStageInstancesPrivacyLevels, id: DiscordSnowflakeType, discoverable_disabled?: boolean | null, guild_scheduled_event_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordStageInstancesPrivacyLevels = (1 | 2);  //integer
export type DiscordStageScheduledEventCreateRequest = {name: string, description?: string | null, image?: string | null, scheduled_start_time: string, scheduled_end_time?: string | null, privacy_level: DiscordGuildScheduledEventPrivacyLevels, entity_type: (DiscordGuildScheduledEventEntityTypes), channel_id?: (null | DiscordSnowflakeType), entity_metadata?: (null | DiscordEntityMetadataStageInstance)};  //object
export type DiscordStageScheduledEventPatchRequestPartial = {status?: (null | DiscordGuildScheduledEventStatuses), name?: string, description?: string | null, image?: string | null, scheduled_start_time?: string, scheduled_end_time?: string | null, entity_type?: (null | (DiscordGuildScheduledEventEntityTypes)), privacy_level?: DiscordGuildScheduledEventPrivacyLevels, channel_id?: (null | DiscordSnowflakeType), entity_metadata?: (null | DiscordEntityMetadataStageInstance)};  //object
export type DiscordStageScheduledEventResponse = {id: DiscordSnowflakeType, guild_id: DiscordSnowflakeType, name: string, description?: string | null, channel_id?: (null | DiscordSnowflakeType), creator_id?: (null | DiscordSnowflakeType), creator?: (null | DiscordUserResponse), image?: string | null, scheduled_start_time: string, scheduled_end_time?: string | null, status: DiscordGuildScheduledEventStatuses, entity_type: (DiscordGuildScheduledEventEntityTypes), entity_id?: (null | DiscordSnowflakeType), user_count?: number | null, privacy_level: DiscordGuildScheduledEventPrivacyLevels, user_rsvp?: (null | DiscordScheduledEventUserResponse), entity_metadata?: (null | DiscordEntityMetadataStageInstanceResponse)};  //object
export type DiscordStandardStickerResponse = {id: DiscordSnowflakeType, name: string, tags: string, type: (DiscordStickerTypes), format_type?: (null | DiscordStickerFormatTypes), description?: string | null, pack_id: DiscordSnowflakeType, sort_value: number};  //object
export type DiscordStickerFormatTypes = (1 | 2 | 3 | 4);  //integer
export type DiscordStickerPackCollectionResponse = {sticker_packs: DiscordStickerPackResponse[]};  //object
export type DiscordStickerPackResponse = {id: DiscordSnowflakeType, sku_id: DiscordSnowflakeType, name: string, description?: string | null, stickers: DiscordStandardStickerResponse[], cover_sticker_id?: (null | DiscordSnowflakeType), banner_asset_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordStickerTypes = (1 | 2);  //integer
export type DiscordStringSelectComponentForMessageRequest = {type: (DiscordMessageComponentTypes), custom_id: string, placeholder?: string | null, min_values?: number | null, max_values?: number | null, disabled?: boolean | null, options: DiscordStringSelectOptionForMessageRequest[]};  //object
export type DiscordStringSelectComponentResponse = {type: (DiscordMessageComponentTypes), id: number, custom_id: string, placeholder?: string | null, min_values?: number | null, max_values?: number | null, disabled?: boolean | null, options: DiscordStringSelectOptionResponse[]};  //object
export type DiscordStringSelectOptionForMessageRequest = {label: string, value: string, description?: string | null, default?: boolean | null, emoji?: (null | DiscordComponentEmojiForMessageRequest)};  //object
export type DiscordStringSelectOptionResponse = {label: string, value: string, description?: string | null, emoji?: (null | DiscordComponentEmojiResponse), default?: boolean | null};  //object
export type DiscordTeamMemberResponse = {user: DiscordUserResponse, team_id: DiscordSnowflakeType, membership_state: DiscordTeamMembershipStates};  //object
export type DiscordTeamMembershipStates = (1 | 2);  //integer
export type DiscordTeamResponse = {id: DiscordSnowflakeType, icon?: string | null, name: string, owner_user_id: DiscordSnowflakeType, members: DiscordTeamMemberResponse[]};  //object
export type DiscordTextDisplayComponentForMessageRequest = {type: (DiscordMessageComponentTypes), content: string};  //object
export type DiscordTextDisplayComponentResponse = {type: (DiscordMessageComponentTypes), id: number, content: string};  //object
export type DiscordTextInputComponentForModalRequest = {type: (DiscordMessageComponentTypes), custom_id: string, style: DiscordTextInputStyleTypes, label: string, value?: string | null, placeholder?: string | null, required?: boolean | null, min_length?: number | null, max_length?: number | null};  //object
export type DiscordTextInputComponentResponse = {type: (DiscordMessageComponentTypes), id: number, custom_id: string, style: DiscordTextInputStyleTypes, label?: string | null, value?: string | null, placeholder?: string | null, required?: boolean | null, min_length?: number | null, max_length?: number | null};  //object
export type DiscordTextInputStyleTypes = (1 | 2);  //integer
export type DiscordThreadAutoArchiveDuration = (60 | 1440 | 4320 | 10080);  //integer
export type DiscordThreadMemberResponse = {id: DiscordSnowflakeType, user_id: DiscordSnowflakeType, join_timestamp: string, flags: number, member?: (null | DiscordGuildMemberResponse)};  //object
export type DiscordThreadMetadataResponse = {archived: boolean, archive_timestamp?: string | null, auto_archive_duration: DiscordThreadAutoArchiveDuration, locked: boolean, create_timestamp?: string | null, invitable?: boolean | null};  //object
export type DiscordThreadResponse = {id: DiscordSnowflakeType, type: (DiscordChannelTypes), last_message_id?: (null | DiscordSnowflakeType), flags: number, last_pin_timestamp?: string | null, guild_id: DiscordSnowflakeType, name: string, parent_id?: (null | DiscordSnowflakeType), rate_limit_per_user?: number | null, bitrate?: number | null, user_limit?: number | null, rtc_region?: string | null, video_quality_mode?: (null | DiscordVideoQualityModes), permissions?: string | null, owner_id: DiscordSnowflakeType, thread_metadata?: (null | DiscordThreadMetadataResponse), message_count: number, member_count: number, total_message_sent: number, applied_tags?: DiscordSnowflakeType[] | null, member?: (null | DiscordThreadMemberResponse)};  //object
export type DiscordThreadSearchResponse = {threads: DiscordThreadResponse[], members: DiscordThreadMemberResponse[], has_more?: boolean | null, first_messages?: DiscordMessageResponse[] | null, total_results?: number | null};  //object
export type DiscordThreadSearchTagSetting = string;  //string
export type DiscordThreadSortOrder = (0 | 1);  //integer
export type DiscordThreadSortingMode = ("relevance" | "creation_time" | "last_message_time" | "archive_time");  //string
export type DiscordThreadsResponse = {threads: DiscordThreadResponse[], members: DiscordThreadMemberResponse[], has_more?: boolean | null, first_messages?: DiscordMessageResponse[] | null};  //object
export type DiscordThumbnailComponentForMessageRequest = {type: (DiscordMessageComponentTypes), description?: string | null, spoiler?: boolean | null, media: DiscordUnfurledMediaRequest};  //object
export type DiscordThumbnailComponentResponse = {type: (DiscordMessageComponentTypes), id: number, media: DiscordUnfurledMediaResponse, description?: string | null, spoiler: boolean};  //object
export type DiscordTypingIndicatorResponse = object;  //object
export type DiscordUInt32Type = number;  //integer
export type DiscordUnfurledMediaRequest = {url: string};  //object
export type DiscordUnfurledMediaRequestWithAttachmentReferenceRequired = {url: string};  //object
export type DiscordUnfurledMediaResponse = {id: DiscordSnowflakeType, url: string, proxy_url: string, width?: number | null, height?: number | null, content_type?: string | null};  //object
export type DiscordUpdateDMRequestPartial = {name?: string | null};  //object
export type DiscordUpdateDefaultReactionEmojiRequest = {emoji_id?: (null | DiscordSnowflakeType), emoji_name?: string | null};  //object
export type DiscordUpdateGroupDMRequestPartial = {name?: string | null, icon?: string | null};  //object
export type DiscordUpdateGuildChannelRequestPartial = {type?: (null | (DiscordChannelTypes)), name?: string, position?: number | null, topic?: string | null, bitrate?: number | null, user_limit?: number | null, nsfw?: boolean | null, rate_limit_per_user?: number | null, parent_id?: (null | DiscordSnowflakeType), permission_overwrites?: DiscordChannelPermissionOverwriteRequest[] | null, rtc_region?: string | null, video_quality_mode?: (null | DiscordVideoQualityModes), default_auto_archive_duration?: (null | DiscordThreadAutoArchiveDuration), default_reaction_emoji?: (null | DiscordUpdateDefaultReactionEmojiRequest), default_thread_rate_limit_per_user?: number | null, default_sort_order?: (null | DiscordThreadSortOrder), default_forum_layout?: (null | DiscordForumLayout), default_tag_setting?: (null | DiscordThreadSearchTagSetting), flags?: number | null, available_tags?: DiscordUpdateThreadTagRequest[] | null};  //object
export type DiscordUpdateGuildOnboardingRequest = {prompts?: DiscordUpdateOnboardingPromptRequest[] | null, enabled?: boolean | null, default_channel_ids?: DiscordSnowflakeType[] | null, mode?: (null | DiscordGuildOnboardingMode)};  //object
export type DiscordUpdateMessageInteractionCallbackRequest = {type: (DiscordInteractionCallbackTypes), data?: (null | DiscordIncomingWebhookUpdateForInteractionCallbackRequestPartial)};  //object
export type DiscordUpdateMessageInteractionCallbackResponse = {type: (DiscordInteractionCallbackTypes), message: DiscordMessageResponse};  //object
export type DiscordUpdateOnboardingPromptRequest = {title: string, options: DiscordOnboardingPromptOptionRequest[], single_select?: boolean | null, required?: boolean | null, in_onboarding?: boolean | null, type?: (null | DiscordOnboardingPromptType), id: DiscordSnowflakeType};  //object
export type DiscordUpdateThreadRequestPartial = {name?: string | null, archived?: boolean | null, locked?: boolean | null, invitable?: boolean | null, auto_archive_duration?: (null | DiscordThreadAutoArchiveDuration), rate_limit_per_user?: number | null, flags?: number | null, applied_tags?: DiscordSnowflakeType[] | null, bitrate?: number | null, user_limit?: number | null, rtc_region?: string | null, video_quality_mode?: (null | DiscordVideoQualityModes)};  //object
export type DiscordUpdateThreadTagRequest = {name: string, emoji_id?: (null | DiscordSnowflakeType), emoji_name?: string | null, moderated?: boolean | null, id?: (null | DiscordSnowflakeType)};  //object
export type DiscordUserAvatarDecorationResponse = {asset: string, sku_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordUserCollectiblesResponse = {nameplate?: (null | DiscordUserNameplateResponse)};  //object
export type DiscordUserCommunicationDisabledAction = {type: (DiscordAutomodActionType), metadata: DiscordUserCommunicationDisabledActionMetadata};  //object
export type DiscordUserCommunicationDisabledActionMetadata = {duration_seconds?: number | null};  //object
export type DiscordUserCommunicationDisabledActionMetadataResponse = {duration_seconds: number};  //object
export type DiscordUserCommunicationDisabledActionResponse = {type: (DiscordAutomodActionType), metadata: DiscordUserCommunicationDisabledActionMetadataResponse};  //object
export type DiscordUserGuildOnboardingResponse = {guild_id: DiscordSnowflakeType, prompts: DiscordOnboardingPromptResponse[], default_channel_ids: DiscordSnowflakeType[], enabled: boolean};  //object
export type DiscordUserNameplateResponse = {sku_id?: (null | DiscordSnowflakeType), asset?: string | null, label?: string | null, palette?: (null | DiscordNameplatePalette)};  //object
export type DiscordUserNotificationSettings = (0 | 1);  //integer
export type DiscordUserPIIResponse = {id: DiscordSnowflakeType, username: string, avatar?: string | null, discriminator: string, public_flags: number, flags: DiscordInt53Type, bot?: boolean | null, system?: boolean | null, banner?: string | null, accent_color?: number | null, global_name?: string | null, avatar_decoration_data?: (null | DiscordUserAvatarDecorationResponse), collectibles?: (null | DiscordUserCollectiblesResponse), clan?: (null | DiscordUserPrimaryGuildResponse), mfa_enabled: boolean, locale: DiscordAvailableLocalesEnum, premium_type?: (null | DiscordPremiumTypes), email?: string | null, verified?: boolean | null};  //object
export type DiscordUserPrimaryGuildResponse = object;  //object
export type DiscordUserResponse = {id: DiscordSnowflakeType, username: string, avatar?: string | null, discriminator: string, public_flags: number, flags: DiscordInt53Type, bot?: boolean | null, system?: boolean | null, banner?: string | null, accent_color?: number | null, global_name?: string | null, avatar_decoration_data?: (null | DiscordUserAvatarDecorationResponse), collectibles?: (null | DiscordUserCollectiblesResponse), clan?: (null | DiscordUserPrimaryGuildResponse)};  //object
export type DiscordUserSelectComponentForMessageRequest = {type: (DiscordMessageComponentTypes), custom_id: string, placeholder?: string | null, min_values?: number | null, max_values?: number | null, disabled?: boolean | null, default_values?: DiscordUserSelectDefaultValue[] | null};  //object
export type DiscordUserSelectComponentResponse = {type: (DiscordMessageComponentTypes), id: number, custom_id: string, placeholder?: string | null, min_values?: number | null, max_values?: number | null, disabled?: boolean | null, default_values?: DiscordUserSelectDefaultValueResponse[] | null};  //object
export type DiscordUserSelectDefaultValue = {type: (DiscordSnowflakeSelectDefaultValueTypes), id: DiscordSnowflakeType};  //object
export type DiscordUserSelectDefaultValueResponse = {type: (DiscordSnowflakeSelectDefaultValueTypes), id: DiscordSnowflakeType};  //object
export type DiscordVanityURLErrorResponse = {message: string, code: number};  //object
export type DiscordVanityURLResponse = {code?: string | null, uses: number, error?: (null | DiscordVanityURLErrorResponse)};  //object
export type DiscordVerificationLevels = (0 | 1 | 2 | 3 | 4);  //integer
export type DiscordVideoQualityModes = (1 | 2);  //integer
export type DiscordVoiceRegionResponse = {id: string, name: string, custom: boolean, deprecated: boolean, optimal: boolean};  //object
export type DiscordVoiceScheduledEventCreateRequest = {name: string, description?: string | null, image?: string | null, scheduled_start_time: string, scheduled_end_time?: string | null, privacy_level: DiscordGuildScheduledEventPrivacyLevels, entity_type: (DiscordGuildScheduledEventEntityTypes), channel_id?: (null | DiscordSnowflakeType), entity_metadata?: (null | DiscordEntityMetadataVoice)};  //object
export type DiscordVoiceScheduledEventPatchRequestPartial = {status?: (null | DiscordGuildScheduledEventStatuses), name?: string, description?: string | null, image?: string | null, scheduled_start_time?: string, scheduled_end_time?: string | null, entity_type?: (null | (DiscordGuildScheduledEventEntityTypes)), privacy_level?: DiscordGuildScheduledEventPrivacyLevels, channel_id?: (null | DiscordSnowflakeType), entity_metadata?: (null | DiscordEntityMetadataVoice)};  //object
export type DiscordVoiceScheduledEventResponse = {id: DiscordSnowflakeType, guild_id: DiscordSnowflakeType, name: string, description?: string | null, channel_id?: (null | DiscordSnowflakeType), creator_id?: (null | DiscordSnowflakeType), creator?: (null | DiscordUserResponse), image?: string | null, scheduled_start_time: string, scheduled_end_time?: string | null, status: DiscordGuildScheduledEventStatuses, entity_type: (DiscordGuildScheduledEventEntityTypes), entity_id?: (null | DiscordSnowflakeType), user_count?: number | null, privacy_level: DiscordGuildScheduledEventPrivacyLevels, user_rsvp?: (null | DiscordScheduledEventUserResponse), entity_metadata?: (null | DiscordEntityMetadataVoiceResponse)};  //object
export type DiscordVoiceStateResponse = {channel_id?: (null | DiscordSnowflakeType), deaf: boolean, guild_id?: (null | DiscordSnowflakeType), member?: (null | DiscordGuildMemberResponse), mute: boolean, request_to_speak_timestamp?: string | null, suppress: boolean, self_stream?: boolean | null, self_deaf: boolean, self_mute: boolean, self_video: boolean, session_id: string, user_id: DiscordSnowflakeType};  //object
export type DiscordWebhookSlackEmbed = {title?: string | null, title_link?: string | null, text?: string | null, color?: string | null, ts?: number | null, pretext?: string | null, footer?: string | null, footer_icon?: string | null, author_name?: string | null, author_link?: string | null, author_icon?: string | null, image_url?: string | null, thumb_url?: string | null, fields?: DiscordWebhookSlackEmbedField[] | null};  //object
export type DiscordWebhookSlackEmbedField = {name?: string | null, value?: string | null, inline?: boolean | null};  //object
export type DiscordWebhookSourceChannelResponse = {id: DiscordSnowflakeType, name: string};  //object
export type DiscordWebhookSourceGuildResponse = {id: DiscordSnowflakeType, icon?: string | null, name: string};  //object
export type DiscordWebhookTypes = (1 | 2 | 3);  //integer
export type DiscordWelcomeMessageResponse = {author_ids: DiscordSnowflakeType[], message: string};  //object
export type DiscordWelcomeScreenPatchRequestPartial = {description?: string | null, welcome_channels?: DiscordGuildWelcomeChannel[] | null, enabled?: boolean | null};  //object
export type DiscordWidgetActivity = {name: string};  //object
export type DiscordWidgetChannel = {id: DiscordSnowflakeType, name: string, position: number};  //object
export type DiscordWidgetImageStyles = ("shield" | "banner1" | "banner2" | "banner3" | "banner4");  //string
export type DiscordWidgetMember = {id: string, username: string, discriminator: DiscordWidgetUserDiscriminator, avatar?: null, status: string, avatar_url: string, activity?: (null | DiscordWidgetActivity), deaf?: boolean | null, mute?: boolean | null, self_deaf?: boolean | null, self_mute?: boolean | null, suppress?: boolean | null, channel_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordWidgetResponse = {id: DiscordSnowflakeType, name: string, instant_invite?: string | null, channels: DiscordWidgetChannel[], members: DiscordWidgetMember[], presence_count: number};  //object
export type DiscordWidgetSettingsResponse = {enabled: boolean, channel_id?: (null | DiscordSnowflakeType)};  //object
export type DiscordWidgetUserDiscriminator = ("0000");  //string
export type DiscordError = {code: number, message: string};  //object
export type DiscordInnerErrors = {_errors: DiscordError[]};  //object
export type DiscordErrorDetails = (object | DiscordInnerErrors);  //undefined
export type DiscordErrorResponse = (DiscordError & {errors?: DiscordErrorDetails});  //object
export type DiscordGatewayEventNames = 'HELLO' | '    READY' | '    RESUMED' | '    RECONNECT' | '    INVALID_SESSION' | '    APPLICATION_COMMAND_PERMISSIONS_UPDATE' | '    AUTO_MODERATION_RULE_CREATE' | '    AUTO_MODERATION_RULE_UPDATE' | '    AUTO_MODERATION_RULE_DELETE' | '    AUTO_MODERATION_ACTION_EXECUTION' | '    CHANNEL_CREATE' | '    CHANNEL_UPDATE' | '    CHANNEL_DELETE' | '    CHANNEL_PINS_UPDATE' | '    THREAD_CREATE' | '    THREAD_UPDATE' | '    THREAD_DELETE' | '    THREAD_LIST_SYNC' | '    THREAD_MEMBER_UPDATE' | '    THREAD_MEMBERS_UPDATE' | '    ENTITLEMENT_CREATE' | '    ENTITLEMENT_UPDATE' | '    ENTITLEMENT_DELETE' | '    GUILD_CREATE' | '    GUILD_UPDATE' | '    GUILD_DELETE' | '    GUILD_AUDIT_LOG_ENTRY_CREATE' | '    GUILD_BAN_ADD' | '    GUILD_BAN_REMOVE' | '    GUILD_EMOJIS_UPDATE' | '    GUILD_STICKERS_UPDATE' | '    GUILD_INTEGRATIONS_UPDATE' | '    GUILD_MEMBER_ADD' | '    GUILD_MEMBER_REMOVE' | '    GUILD_MEMBER_UPDATE' | '    GUILD_MEMBERS_CHUNK' | '    GUILD_ROLE_CREATE' | '    GUILD_ROLE_UPDATE' | '    GUILD_ROLE_DELETE' | '    GUILD_SCHEDULED_EVENT_CREATE' | '    GUILD_SCHEDULED_EVENT_UPDATE' | '    GUILD_SCHEDULED_EVENT_DELETE' | '    GUILD_SCHEDULED_EVENT_USER_ADD' | '    GUILD_SCHEDULED_EVENT_USER_REMOVE' | '    GUILD_SOUNDBOARD_SOUND_CREATE' | '    GUILD_SOUNDBOARD_SOUND_UPDATE' | '    GUILD_SOUNDBOARD_SOUND_DELETE' | '    GUILD_SOUNDBOARD_SOUNDS_UPDATE' | '    SOUNDBOARD_SOUNDS' | '    INTEGRATION_CREATE' | '    INTEGRATION_UPDATE' | '    INTEGRATION_DELETE' | '    INTERACTION_CREATE' | '    INVITE_CREATE' | '    INVITE_DELETE' | '    MESSAGE_CREATE' | '    MESSAGE_UPDATE' | '    MESSAGE_DELETE' | '    MESSAGE_DELETE_BULK' | '    MESSAGE_REACTION_ADD' | '    MESSAGE_REACTION_REMOVE' | '    MESSAGE_REACTION_REMOVE_ALL' | '    MESSAGE_REACTION_REMOVE_EMOJI' | '    PRESENCE_UPDATE' | '    STAGE_INSTANCE_CREATE' | '    STAGE_INSTANCE_UPDATE' | '    STAGE_INSTANCE_DELETE' | '    SUBSCRIPTION_CREATE' | '    SUBSCRIPTION_UPDATE' | '    SUBSCRIPTION_DELETE' | '    TYPING_START' | '    USER_UPDATE' | '    VOICE_CHANNEL_EFFECT_SEND' | '    VOICE_STATE_UPDATE' | '    VOICE_SERVER_UPDATE' | '    WEBHOOKS_UPDATE' | '    MESSAGE_POLL_VOTE_ADD' | '    MESSAGE_POLL_VOTE_REMOVE';

export interface DiscordGatewayPayload {
  "op": number;
  "d": unknown;
  "s": number | null;
  "t": string | null;
}

const {stringify} = JSON;
export namespace JsonAPI {
   export function getMyApplication(): RequestJson<DiscordPrivateApplicationResponse> { return new RequestJson<DiscordPrivateApplicationResponse>("/applications/@me", RequestMethod.GET); }
   export function updateMyApplication(body: DiscordApplicationFormPartial): RequestJson<DiscordPrivateApplicationResponse> { return new RequestJson<DiscordPrivateApplicationResponse>("/applications/@me", RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function getApplication(applicationId: DiscordSnowflakeType): RequestJson<DiscordPrivateApplicationResponse> { return new RequestJson<DiscordPrivateApplicationResponse>(`/applications/${applicationId}`, RequestMethod.GET); }
   export function updateApplication(applicationId: DiscordSnowflakeType, body: DiscordApplicationFormPartial): RequestJson<DiscordPrivateApplicationResponse> { return new RequestJson<DiscordPrivateApplicationResponse>(`/applications/${applicationId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function applicationsGetActivityInstance(applicationId: DiscordSnowflakeType, instanceId: string): RequestJson<DiscordEmbeddedActivityInstance> { return new RequestJson<DiscordEmbeddedActivityInstance>(`/applications/${applicationId}/activity-instances/${instanceId}`, RequestMethod.GET); }
   export function uploadApplicationAttachment(applicationId: DiscordSnowflakeType): RequestJson<DiscordActivitiesAttachmentResponse> { return new RequestJson<DiscordActivitiesAttachmentResponse>(`/applications/${applicationId}/attachment`, RequestMethod.POST); }
   export function listApplicationCommands(applicationId: DiscordSnowflakeType): RequestJson<DiscordApplicationCommandResponse[] | null> { return new RequestJson<DiscordApplicationCommandResponse[] | null>(`/applications/${applicationId}/commands`, RequestMethod.GET); }
   export function bulkSetApplicationCommands(applicationId: DiscordSnowflakeType, body: DiscordApplicationCommandUpdateRequest[] | null): RequestJson<DiscordApplicationCommandResponse[] | null> { return new RequestJson<DiscordApplicationCommandResponse[] | null>(`/applications/${applicationId}/commands`, RequestMethod.PUT).setBody(stringify(body), "application/json"); }
   export function createApplicationCommand(applicationId: DiscordSnowflakeType, body: DiscordApplicationCommandCreateRequest): RequestJson<DiscordApplicationCommandResponse> { return new RequestJson<DiscordApplicationCommandResponse>(`/applications/${applicationId}/commands`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getApplicationCommand(applicationId: DiscordSnowflakeType, commandId: DiscordSnowflakeType): RequestJson<DiscordApplicationCommandResponse> { return new RequestJson<DiscordApplicationCommandResponse>(`/applications/${applicationId}/commands/${commandId}`, RequestMethod.GET); }
   export function deleteApplicationCommand(applicationId: DiscordSnowflakeType, commandId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/applications/${applicationId}/commands/${commandId}`, RequestMethod.DELETE); }
   export function updateApplicationCommand(applicationId: DiscordSnowflakeType, commandId: DiscordSnowflakeType, body: DiscordApplicationCommandPatchRequestPartial): RequestJson<DiscordApplicationCommandResponse> { return new RequestJson<DiscordApplicationCommandResponse>(`/applications/${applicationId}/commands/${commandId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function listApplicationEmojis(applicationId: DiscordSnowflakeType): RequestJson<DiscordListApplicationEmojisResponse> { return new RequestJson<DiscordListApplicationEmojisResponse>(`/applications/${applicationId}/emojis`, RequestMethod.GET); }
   export function createApplicationEmoji(applicationId: DiscordSnowflakeType, body: {name: string, image: string}): RequestJson<DiscordEmojiResponse> { return new RequestJson<DiscordEmojiResponse>(`/applications/${applicationId}/emojis`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getApplicationEmoji(applicationId: DiscordSnowflakeType, emojiId: DiscordSnowflakeType): RequestJson<DiscordEmojiResponse> { return new RequestJson<DiscordEmojiResponse>(`/applications/${applicationId}/emojis/${emojiId}`, RequestMethod.GET); }
   export function deleteApplicationEmoji(applicationId: DiscordSnowflakeType, emojiId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/applications/${applicationId}/emojis/${emojiId}`, RequestMethod.DELETE); }
   export function updateApplicationEmoji(applicationId: DiscordSnowflakeType, emojiId: DiscordSnowflakeType, body: {name?: string}): RequestJson<DiscordEmojiResponse> { return new RequestJson<DiscordEmojiResponse>(`/applications/${applicationId}/emojis/${emojiId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function getEntitlements(applicationId: DiscordSnowflakeType): RequestJson<(null | DiscordEntitlementResponse)[]> { return new RequestJson<(null | DiscordEntitlementResponse)[]>(`/applications/${applicationId}/entitlements`, RequestMethod.GET); }
   export function createEntitlement(applicationId: DiscordSnowflakeType, body: DiscordCreateEntitlementRequestData): RequestJson<DiscordEntitlementResponse> { return new RequestJson<DiscordEntitlementResponse>(`/applications/${applicationId}/entitlements`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getEntitlement(applicationId: DiscordSnowflakeType, entitlementId: DiscordSnowflakeType): RequestJson<DiscordEntitlementResponse> { return new RequestJson<DiscordEntitlementResponse>(`/applications/${applicationId}/entitlements/${entitlementId}`, RequestMethod.GET); }
   export function deleteEntitlement(applicationId: DiscordSnowflakeType, entitlementId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/applications/${applicationId}/entitlements/${entitlementId}`, RequestMethod.DELETE); }
   export function consumeEntitlement(applicationId: DiscordSnowflakeType, entitlementId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/applications/${applicationId}/entitlements/${entitlementId}/consume`, RequestMethod.POST); }
   export function listGuildApplicationCommands(applicationId: DiscordSnowflakeType, guildId: DiscordSnowflakeType): RequestJson<DiscordApplicationCommandResponse[] | null> { return new RequestJson<DiscordApplicationCommandResponse[] | null>(`/applications/${applicationId}/guilds/${guildId}/commands`, RequestMethod.GET); }
   export function bulkSetGuildApplicationCommands(applicationId: DiscordSnowflakeType, guildId: DiscordSnowflakeType, body: DiscordApplicationCommandUpdateRequest[] | null): RequestJson<DiscordApplicationCommandResponse[] | null> { return new RequestJson<DiscordApplicationCommandResponse[] | null>(`/applications/${applicationId}/guilds/${guildId}/commands`, RequestMethod.PUT).setBody(stringify(body), "application/json"); }
   export function createGuildApplicationCommand(applicationId: DiscordSnowflakeType, guildId: DiscordSnowflakeType, body: DiscordApplicationCommandCreateRequest): RequestJson<DiscordApplicationCommandResponse> { return new RequestJson<DiscordApplicationCommandResponse>(`/applications/${applicationId}/guilds/${guildId}/commands`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function listGuildApplicationCommandPermissions(applicationId: DiscordSnowflakeType, guildId: DiscordSnowflakeType): RequestJson<DiscordCommandPermissionsResponse[]> { return new RequestJson<DiscordCommandPermissionsResponse[]>(`/applications/${applicationId}/guilds/${guildId}/commands/permissions`, RequestMethod.GET); }
   export function getGuildApplicationCommand(applicationId: DiscordSnowflakeType, guildId: DiscordSnowflakeType, commandId: DiscordSnowflakeType): RequestJson<DiscordApplicationCommandResponse> { return new RequestJson<DiscordApplicationCommandResponse>(`/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`, RequestMethod.GET); }
   export function deleteGuildApplicationCommand(applicationId: DiscordSnowflakeType, guildId: DiscordSnowflakeType, commandId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`, RequestMethod.DELETE); }
   export function updateGuildApplicationCommand(applicationId: DiscordSnowflakeType, guildId: DiscordSnowflakeType, commandId: DiscordSnowflakeType, body: DiscordApplicationCommandPatchRequestPartial): RequestJson<DiscordApplicationCommandResponse> { return new RequestJson<DiscordApplicationCommandResponse>(`/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function getGuildApplicationCommandPermissions(applicationId: DiscordSnowflakeType, guildId: DiscordSnowflakeType, commandId: DiscordSnowflakeType): RequestJson<DiscordCommandPermissionsResponse> { return new RequestJson<DiscordCommandPermissionsResponse>(`/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`, RequestMethod.GET); }
   export function setGuildApplicationCommandPermissions(applicationId: DiscordSnowflakeType, guildId: DiscordSnowflakeType, commandId: DiscordSnowflakeType, body: {permissions?: DiscordApplicationCommandPermission[] | null}): RequestJson<DiscordCommandPermissionsResponse> { return new RequestJson<DiscordCommandPermissionsResponse>(`/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`, RequestMethod.PUT).setBody(stringify(body), "application/json"); }
   export function getApplicationRoleConnectionsMetadata(applicationId: DiscordSnowflakeType): RequestJson<DiscordApplicationRoleConnectionsMetadataItemResponse[] | null> { return new RequestJson<DiscordApplicationRoleConnectionsMetadataItemResponse[] | null>(`/applications/${applicationId}/role-connections/metadata`, RequestMethod.GET); }
   export function updateApplicationRoleConnectionsMetadata(applicationId: DiscordSnowflakeType, body: DiscordApplicationRoleConnectionsMetadataItemRequest[] | null): RequestJson<DiscordApplicationRoleConnectionsMetadataItemResponse[] | null> { return new RequestJson<DiscordApplicationRoleConnectionsMetadataItemResponse[] | null>(`/applications/${applicationId}/role-connections/metadata`, RequestMethod.PUT).setBody(stringify(body), "application/json"); }
   export function getChannel(channelId: DiscordSnowflakeType): RequestJson<(DiscordGuildChannelResponse | DiscordPrivateChannelResponse | DiscordPrivateGroupChannelResponse | DiscordThreadResponse)> { return new RequestJson<(DiscordGuildChannelResponse | DiscordPrivateChannelResponse | DiscordPrivateGroupChannelResponse | DiscordThreadResponse)>(`/channels/${channelId}`, RequestMethod.GET); }
   export function deleteChannel(channelId: DiscordSnowflakeType): RequestJson<(DiscordGuildChannelResponse | DiscordPrivateChannelResponse | DiscordPrivateGroupChannelResponse | DiscordThreadResponse)> { return new RequestJson<(DiscordGuildChannelResponse | DiscordPrivateChannelResponse | DiscordPrivateGroupChannelResponse | DiscordThreadResponse)>(`/channels/${channelId}`, RequestMethod.DELETE); }
   export function updateChannel(channelId: DiscordSnowflakeType, body: (DiscordUpdateDMRequestPartial | DiscordUpdateGroupDMRequestPartial | DiscordUpdateGuildChannelRequestPartial | DiscordUpdateThreadRequestPartial)): RequestJson<(DiscordGuildChannelResponse | DiscordPrivateChannelResponse | DiscordPrivateGroupChannelResponse | DiscordThreadResponse)> { return new RequestJson<(DiscordGuildChannelResponse | DiscordPrivateChannelResponse | DiscordPrivateGroupChannelResponse | DiscordThreadResponse)>(`/channels/${channelId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function followChannel(channelId: DiscordSnowflakeType, body: {webhook_channel_id: DiscordSnowflakeType}): RequestJson<DiscordChannelFollowerResponse> { return new RequestJson<DiscordChannelFollowerResponse>(`/channels/${channelId}/followers`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function listChannelInvites(channelId: DiscordSnowflakeType): RequestJson<(DiscordFriendInviteResponse | DiscordGroupDMInviteResponse | DiscordGuildInviteResponse)[] | null> { return new RequestJson<(DiscordFriendInviteResponse | DiscordGroupDMInviteResponse | DiscordGuildInviteResponse)[] | null>(`/channels/${channelId}/invites`, RequestMethod.GET); }
   export function createChannelInvite(channelId: DiscordSnowflakeType, body: (DiscordCreateGroupDMInviteRequest | DiscordCreateGuildInviteRequest)): RequestJson<(DiscordFriendInviteResponse | DiscordGroupDMInviteResponse | DiscordGuildInviteResponse)> { return new RequestJson<(DiscordFriendInviteResponse | DiscordGroupDMInviteResponse | DiscordGuildInviteResponse)>(`/channels/${channelId}/invites`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function listMessages(channelId: DiscordSnowflakeType): RequestJson<DiscordMessageResponse[] | null> { return new RequestJson<DiscordMessageResponse[] | null>(`/channels/${channelId}/messages`, RequestMethod.GET); }
   export function createMessage(channelId: DiscordSnowflakeType, body: DiscordMessageCreateRequest): RequestJson<DiscordMessageResponse> { return new RequestJson<DiscordMessageResponse>(`/channels/${channelId}/messages`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function bulkDeleteMessages(channelId: DiscordSnowflakeType, body: {messages: DiscordSnowflakeType[]}): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/messages/bulk-delete`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getMessage(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType): RequestJson<DiscordMessageResponse> { return new RequestJson<DiscordMessageResponse>(`/channels/${channelId}/messages/${messageId}`, RequestMethod.GET); }
   export function deleteMessage(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/messages/${messageId}`, RequestMethod.DELETE); }
   export function updateMessage(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType, body: DiscordMessageEditRequestPartial): RequestJson<DiscordMessageResponse> { return new RequestJson<DiscordMessageResponse>(`/channels/${channelId}/messages/${messageId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function crosspostMessage(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType): RequestJson<DiscordMessageResponse> { return new RequestJson<DiscordMessageResponse>(`/channels/${channelId}/messages/${messageId}/crosspost`, RequestMethod.POST); }
   export function deleteAllMessageReactions(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/messages/${messageId}/reactions`, RequestMethod.DELETE); }
   export function listMessageReactionsByEmoji(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType, emojiName: string): RequestJson<DiscordUserResponse[]> { return new RequestJson<DiscordUserResponse[]>(`/channels/${channelId}/messages/${messageId}/reactions/${emojiName}`, RequestMethod.GET); }
   export function deleteAllMessageReactionsByEmoji(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType, emojiName: string): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/messages/${messageId}/reactions/${emojiName}`, RequestMethod.DELETE); }
   export function addMyMessageReaction(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType, emojiName: string): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/messages/${messageId}/reactions/${emojiName}/@me`, RequestMethod.PUT); }
   export function deleteMyMessageReaction(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType, emojiName: string): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/messages/${messageId}/reactions/${emojiName}/@me`, RequestMethod.DELETE); }
   export function deleteUserMessageReaction(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType, emojiName: string, userId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/messages/${messageId}/reactions/${emojiName}/${userId}`, RequestMethod.DELETE); }
   export function createThreadFromMessage(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType, body: DiscordCreateTextThreadWithMessageRequest): RequestJson<DiscordThreadResponse> { return new RequestJson<DiscordThreadResponse>(`/channels/${channelId}/messages/${messageId}/threads`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function setChannelPermissionOverwrite(channelId: DiscordSnowflakeType, overwriteId: DiscordSnowflakeType, body: {type?: (null | DiscordChannelPermissionOverwrites), allow?: number | null, deny?: number | null}): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/permissions/${overwriteId}`, RequestMethod.PUT).setBody(stringify(body), "application/json"); }
   export function deleteChannelPermissionOverwrite(channelId: DiscordSnowflakeType, overwriteId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/permissions/${overwriteId}`, RequestMethod.DELETE); }
   export function deprecatedListPins(channelId: DiscordSnowflakeType): RequestJson<DiscordMessageResponse[] | null> { return new RequestJson<DiscordMessageResponse[] | null>(`/channels/${channelId}/pins`, RequestMethod.GET); }
   export function deprecatedCreatePin(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/pins/${messageId}`, RequestMethod.PUT); }
   export function deprecatedDeletePin(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/pins/${messageId}`, RequestMethod.DELETE); }
   export function getAnswerVoters(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType, answerId: number): RequestJson<DiscordPollAnswerDetailsResponse> { return new RequestJson<DiscordPollAnswerDetailsResponse>(`/channels/${channelId}/polls/${messageId}/answers/${answerId}`, RequestMethod.GET); }
   export function pollExpire(channelId: DiscordSnowflakeType, messageId: DiscordSnowflakeType): RequestJson<DiscordMessageResponse> { return new RequestJson<DiscordMessageResponse>(`/channels/${channelId}/polls/${messageId}/expire`, RequestMethod.POST); }
   export function addGroupDmUser(channelId: DiscordSnowflakeType, userId: DiscordSnowflakeType, body: {access_token?: string | null, nick?: string | null}): RequestJson<(DiscordPrivateChannelResponse | DiscordPrivateGroupChannelResponse)> { return new RequestJson<(DiscordPrivateChannelResponse | DiscordPrivateGroupChannelResponse)>(`/channels/${channelId}/recipients/${userId}`, RequestMethod.PUT).setBody(stringify(body), "application/json"); }
   export function deleteGroupDmUser(channelId: DiscordSnowflakeType, userId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/recipients/${userId}`, RequestMethod.DELETE); }
   export function sendSoundboardSound(channelId: DiscordSnowflakeType, body: DiscordSoundboardSoundSendRequest): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/send-soundboard-sound`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function listThreadMembers(channelId: DiscordSnowflakeType): RequestJson<DiscordThreadMemberResponse[]> { return new RequestJson<DiscordThreadMemberResponse[]>(`/channels/${channelId}/thread-members`, RequestMethod.GET); }
   export function joinThread(channelId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/thread-members/@me`, RequestMethod.PUT); }
   export function leaveThread(channelId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/thread-members/@me`, RequestMethod.DELETE); }
   export function getThreadMember(channelId: DiscordSnowflakeType, userId: DiscordSnowflakeType): RequestJson<DiscordThreadMemberResponse> { return new RequestJson<DiscordThreadMemberResponse>(`/channels/${channelId}/thread-members/${userId}`, RequestMethod.GET); }
   export function addThreadMember(channelId: DiscordSnowflakeType, userId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/thread-members/${userId}`, RequestMethod.PUT); }
   export function deleteThreadMember(channelId: DiscordSnowflakeType, userId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/channels/${channelId}/thread-members/${userId}`, RequestMethod.DELETE); }
   export function createThread(channelId: DiscordSnowflakeType, body: (DiscordCreateForumThreadRequest | DiscordCreateTextThreadWithoutMessageRequest)): RequestJson<DiscordCreatedThreadResponse> { return new RequestJson<DiscordCreatedThreadResponse>(`/channels/${channelId}/threads`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function listPrivateArchivedThreads(channelId: DiscordSnowflakeType): RequestJson<DiscordThreadsResponse> { return new RequestJson<DiscordThreadsResponse>(`/channels/${channelId}/threads/archived/private`, RequestMethod.GET); }
   export function listPublicArchivedThreads(channelId: DiscordSnowflakeType): RequestJson<DiscordThreadsResponse> { return new RequestJson<DiscordThreadsResponse>(`/channels/${channelId}/threads/archived/public`, RequestMethod.GET); }
   export function threadSearch(channelId: DiscordSnowflakeType): RequestJson<DiscordThreadSearchResponse> { return new RequestJson<DiscordThreadSearchResponse>(`/channels/${channelId}/threads/search`, RequestMethod.GET); }
   export function triggerTypingIndicator(channelId: DiscordSnowflakeType): RequestJson<DiscordTypingIndicatorResponse> { return new RequestJson<DiscordTypingIndicatorResponse>(`/channels/${channelId}/typing`, RequestMethod.POST); }
   export function listMyPrivateArchivedThreads(channelId: DiscordSnowflakeType): RequestJson<DiscordThreadsResponse> { return new RequestJson<DiscordThreadsResponse>(`/channels/${channelId}/users/@me/threads/archived/private`, RequestMethod.GET); }
   export function listChannelWebhooks(channelId: DiscordSnowflakeType): RequestJson<(DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)[] | null> { return new RequestJson<(DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)[] | null>(`/channels/${channelId}/webhooks`, RequestMethod.GET); }
   export function createWebhook(channelId: DiscordSnowflakeType, body: {name: string, avatar?: string | null}): RequestJson<DiscordGuildIncomingWebhookResponse> { return new RequestJson<DiscordGuildIncomingWebhookResponse>(`/channels/${channelId}/webhooks`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getGateway(): RequestJson<DiscordGatewayResponse> { return new RequestJson<DiscordGatewayResponse>("/gateway", RequestMethod.GET); }
   export function getBotGateway(): RequestJson<DiscordGatewayBotResponse> { return new RequestJson<DiscordGatewayBotResponse>("/gateway/bot", RequestMethod.GET); }
   export function createGuild(body: DiscordGuildCreateRequest): RequestJson<DiscordGuildResponse> { return new RequestJson<DiscordGuildResponse>("/guilds", RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getGuildTemplate(code: string): RequestJson<DiscordGuildTemplateResponse> { return new RequestJson<DiscordGuildTemplateResponse>(`/guilds/templates/${code}`, RequestMethod.GET); }
   export function createGuildFromTemplate(code: string, body: {name: string, icon?: string | null}): RequestJson<DiscordGuildResponse> { return new RequestJson<DiscordGuildResponse>(`/guilds/templates/${code}`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getGuild(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildWithCountsResponse> { return new RequestJson<DiscordGuildWithCountsResponse>(`/guilds/${guildId}`, RequestMethod.GET); }
   export function deleteGuild(guildId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}`, RequestMethod.DELETE); }
   export function updateGuild(guildId: DiscordSnowflakeType, body: DiscordGuildPatchRequestPartial): RequestJson<DiscordGuildResponse> { return new RequestJson<DiscordGuildResponse>(`/guilds/${guildId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function listGuildAuditLogEntries(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildAuditLogResponse> { return new RequestJson<DiscordGuildAuditLogResponse>(`/guilds/${guildId}/audit-logs`, RequestMethod.GET); }
   export function listAutoModerationRules(guildId: DiscordSnowflakeType): RequestJson<(DiscordDefaultKeywordRuleResponse | DiscordKeywordRuleResponse | DiscordMLSpamRuleResponse | DiscordMentionSpamRuleResponse | DiscordSpamLinkRuleResponse | null)[] | null> { return new RequestJson<(DiscordDefaultKeywordRuleResponse | DiscordKeywordRuleResponse | DiscordMLSpamRuleResponse | DiscordMentionSpamRuleResponse | DiscordSpamLinkRuleResponse | null)[] | null>(`/guilds/${guildId}/auto-moderation/rules`, RequestMethod.GET); }
   export function createAutoModerationRule(guildId: DiscordSnowflakeType, body: (DiscordDefaultKeywordListUpsertRequest | DiscordKeywordUpsertRequest | DiscordMLSpamUpsertRequest | DiscordMentionSpamUpsertRequest)): RequestJson<(DiscordDefaultKeywordRuleResponse | DiscordKeywordRuleResponse | DiscordMLSpamRuleResponse | DiscordMentionSpamRuleResponse | DiscordSpamLinkRuleResponse)> { return new RequestJson<(DiscordDefaultKeywordRuleResponse | DiscordKeywordRuleResponse | DiscordMLSpamRuleResponse | DiscordMentionSpamRuleResponse | DiscordSpamLinkRuleResponse)>(`/guilds/${guildId}/auto-moderation/rules`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getAutoModerationRule(guildId: DiscordSnowflakeType, ruleId: DiscordSnowflakeType): RequestJson<(DiscordDefaultKeywordRuleResponse | DiscordKeywordRuleResponse | DiscordMLSpamRuleResponse | DiscordMentionSpamRuleResponse | DiscordSpamLinkRuleResponse)> { return new RequestJson<(DiscordDefaultKeywordRuleResponse | DiscordKeywordRuleResponse | DiscordMLSpamRuleResponse | DiscordMentionSpamRuleResponse | DiscordSpamLinkRuleResponse)>(`/guilds/${guildId}/auto-moderation/rules/${ruleId}`, RequestMethod.GET); }
   export function deleteAutoModerationRule(guildId: DiscordSnowflakeType, ruleId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/auto-moderation/rules/${ruleId}`, RequestMethod.DELETE); }
   export function updateAutoModerationRule(guildId: DiscordSnowflakeType, ruleId: DiscordSnowflakeType, body: (DiscordDefaultKeywordListUpsertRequestPartial | DiscordKeywordUpsertRequestPartial | DiscordMLSpamUpsertRequestPartial | DiscordMentionSpamUpsertRequestPartial)): RequestJson<(DiscordDefaultKeywordRuleResponse | DiscordKeywordRuleResponse | DiscordMLSpamRuleResponse | DiscordMentionSpamRuleResponse | DiscordSpamLinkRuleResponse)> { return new RequestJson<(DiscordDefaultKeywordRuleResponse | DiscordKeywordRuleResponse | DiscordMLSpamRuleResponse | DiscordMentionSpamRuleResponse | DiscordSpamLinkRuleResponse)>(`/guilds/${guildId}/auto-moderation/rules/${ruleId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function listGuildBans(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildBanResponse[] | null> { return new RequestJson<DiscordGuildBanResponse[] | null>(`/guilds/${guildId}/bans`, RequestMethod.GET); }
   export function getGuildBan(guildId: DiscordSnowflakeType, userId: DiscordSnowflakeType): RequestJson<DiscordGuildBanResponse> { return new RequestJson<DiscordGuildBanResponse>(`/guilds/${guildId}/bans/${userId}`, RequestMethod.GET); }
   export function banUserFromGuild(guildId: DiscordSnowflakeType, userId: DiscordSnowflakeType, body: {delete_message_seconds?: number | null, delete_message_days?: number | null}): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/bans/${userId}`, RequestMethod.PUT).setBody(stringify(body), "application/json"); }
   export function unbanUserFromGuild(guildId: DiscordSnowflakeType, userId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/bans/${userId}`, RequestMethod.DELETE); }
   export function bulkBanUsersFromGuild(guildId: DiscordSnowflakeType, body: {user_ids: DiscordSnowflakeType[], delete_message_seconds?: number | null}): RequestJson<DiscordBulkBanUsersResponse> { return new RequestJson<DiscordBulkBanUsersResponse>(`/guilds/${guildId}/bulk-ban`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function listGuildChannels(guildId: DiscordSnowflakeType): RequestJson<(DiscordGuildChannelResponse | DiscordPrivateChannelResponse | DiscordPrivateGroupChannelResponse | DiscordThreadResponse)[] | null> { return new RequestJson<(DiscordGuildChannelResponse | DiscordPrivateChannelResponse | DiscordPrivateGroupChannelResponse | DiscordThreadResponse)[] | null>(`/guilds/${guildId}/channels`, RequestMethod.GET); }
   export function createGuildChannel(guildId: DiscordSnowflakeType, body: DiscordCreateGuildChannelRequest): RequestJson<DiscordGuildChannelResponse> { return new RequestJson<DiscordGuildChannelResponse>(`/guilds/${guildId}/channels`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function bulkUpdateGuildChannels(guildId: DiscordSnowflakeType, body: {id?: DiscordSnowflakeType, position?: number | null, parent_id?: (null | DiscordSnowflakeType), lock_permissions?: boolean | null}[]): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/channels`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function listGuildEmojis(guildId: DiscordSnowflakeType): RequestJson<DiscordEmojiResponse[] | null> { return new RequestJson<DiscordEmojiResponse[] | null>(`/guilds/${guildId}/emojis`, RequestMethod.GET); }
   export function createGuildEmoji(guildId: DiscordSnowflakeType, body: {name: string, image: string, roles?: (null | DiscordSnowflakeType)[] | null}): RequestJson<DiscordEmojiResponse> { return new RequestJson<DiscordEmojiResponse>(`/guilds/${guildId}/emojis`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getGuildEmoji(guildId: DiscordSnowflakeType, emojiId: DiscordSnowflakeType): RequestJson<DiscordEmojiResponse> { return new RequestJson<DiscordEmojiResponse>(`/guilds/${guildId}/emojis/${emojiId}`, RequestMethod.GET); }
   export function deleteGuildEmoji(guildId: DiscordSnowflakeType, emojiId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/emojis/${emojiId}`, RequestMethod.DELETE); }
   export function updateGuildEmoji(guildId: DiscordSnowflakeType, emojiId: DiscordSnowflakeType, body: {name?: string, roles?: (null | DiscordSnowflakeType)[] | null}): RequestJson<DiscordEmojiResponse> { return new RequestJson<DiscordEmojiResponse>(`/guilds/${guildId}/emojis/${emojiId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function listGuildIntegrations(guildId: DiscordSnowflakeType): RequestJson<(DiscordDiscordIntegrationResponse | DiscordExternalConnectionIntegrationResponse | DiscordGuildSubscriptionIntegrationResponse)[] | null> { return new RequestJson<(DiscordDiscordIntegrationResponse | DiscordExternalConnectionIntegrationResponse | DiscordGuildSubscriptionIntegrationResponse)[] | null>(`/guilds/${guildId}/integrations`, RequestMethod.GET); }
   export function deleteGuildIntegration(guildId: DiscordSnowflakeType, integrationId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/integrations/${integrationId}`, RequestMethod.DELETE); }
   export function listGuildInvites(guildId: DiscordSnowflakeType): RequestJson<(DiscordFriendInviteResponse | DiscordGroupDMInviteResponse | DiscordGuildInviteResponse)[] | null> { return new RequestJson<(DiscordFriendInviteResponse | DiscordGroupDMInviteResponse | DiscordGuildInviteResponse)[] | null>(`/guilds/${guildId}/invites`, RequestMethod.GET); }
   export function listGuildMembers(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildMemberResponse[]> { return new RequestJson<DiscordGuildMemberResponse[]>(`/guilds/${guildId}/members`, RequestMethod.GET); }
   export function updateMyGuildMember(guildId: DiscordSnowflakeType, body: {nick?: string | null}): RequestJson<DiscordPrivateGuildMemberResponse> { return new RequestJson<DiscordPrivateGuildMemberResponse>(`/guilds/${guildId}/members/@me`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function searchGuildMembers(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildMemberResponse[]> { return new RequestJson<DiscordGuildMemberResponse[]>(`/guilds/${guildId}/members/search`, RequestMethod.GET); }
   export function getGuildMember(guildId: DiscordSnowflakeType, userId: DiscordSnowflakeType): RequestJson<DiscordGuildMemberResponse> { return new RequestJson<DiscordGuildMemberResponse>(`/guilds/${guildId}/members/${userId}`, RequestMethod.GET); }
   export function addGuildMember(guildId: DiscordSnowflakeType, userId: DiscordSnowflakeType, body: {nick?: string | null, roles?: (null | DiscordSnowflakeType)[] | null, mute?: boolean | null, deaf?: boolean | null, access_token: string, flags?: number | null}): RequestJson<DiscordGuildMemberResponse> { return new RequestJson<DiscordGuildMemberResponse>(`/guilds/${guildId}/members/${userId}`, RequestMethod.PUT).setBody(stringify(body), "application/json"); }
   export function deleteGuildMember(guildId: DiscordSnowflakeType, userId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/members/${userId}`, RequestMethod.DELETE); }
   export function updateGuildMember(guildId: DiscordSnowflakeType, userId: DiscordSnowflakeType, body: {nick?: string | null, roles?: (null | DiscordSnowflakeType)[] | null, mute?: boolean | null, deaf?: boolean | null, channel_id?: (null | DiscordSnowflakeType), communication_disabled_until?: string | null, flags?: number | null}): RequestJson<DiscordGuildMemberResponse> { return new RequestJson<DiscordGuildMemberResponse>(`/guilds/${guildId}/members/${userId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function addGuildMemberRole(guildId: DiscordSnowflakeType, userId: DiscordSnowflakeType, roleId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/members/${userId}/roles/${roleId}`, RequestMethod.PUT); }
   export function deleteGuildMemberRole(guildId: DiscordSnowflakeType, userId: DiscordSnowflakeType, roleId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/members/${userId}/roles/${roleId}`, RequestMethod.DELETE); }
   export function setGuildMfaLevel(guildId: DiscordSnowflakeType, body: {level: DiscordGuildMFALevel}): RequestJson<DiscordGuildMFALevelResponse> { return new RequestJson<DiscordGuildMFALevelResponse>(`/guilds/${guildId}/mfa`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getGuildNewMemberWelcome(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildHomeSettingsResponse> { return new RequestJson<DiscordGuildHomeSettingsResponse>(`/guilds/${guildId}/new-member-welcome`, RequestMethod.GET); }
   export function getGuildsOnboarding(guildId: DiscordSnowflakeType): RequestJson<DiscordUserGuildOnboardingResponse> { return new RequestJson<DiscordUserGuildOnboardingResponse>(`/guilds/${guildId}/onboarding`, RequestMethod.GET); }
   export function putGuildsOnboarding(guildId: DiscordSnowflakeType, body: DiscordUpdateGuildOnboardingRequest): RequestJson<DiscordGuildOnboardingResponse> { return new RequestJson<DiscordGuildOnboardingResponse>(`/guilds/${guildId}/onboarding`, RequestMethod.PUT).setBody(stringify(body), "application/json"); }
   export function getGuildPreview(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildPreviewResponse> { return new RequestJson<DiscordGuildPreviewResponse>(`/guilds/${guildId}/preview`, RequestMethod.GET); }
   export function previewPruneGuild(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildPruneResponse> { return new RequestJson<DiscordGuildPruneResponse>(`/guilds/${guildId}/prune`, RequestMethod.GET); }
   export function pruneGuild(guildId: DiscordSnowflakeType, body: {days?: number | null, compute_prune_count?: boolean | null, include_roles?: (string | (null | DiscordSnowflakeType)[] | null)}): RequestJson<DiscordGuildPruneResponse> { return new RequestJson<DiscordGuildPruneResponse>(`/guilds/${guildId}/prune`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function listGuildVoiceRegions(guildId: DiscordSnowflakeType): RequestJson<DiscordVoiceRegionResponse[] | null> { return new RequestJson<DiscordVoiceRegionResponse[] | null>(`/guilds/${guildId}/regions`, RequestMethod.GET); }
   export function listGuildRoles(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildRoleResponse[]> { return new RequestJson<DiscordGuildRoleResponse[]>(`/guilds/${guildId}/roles`, RequestMethod.GET); }
   export function createGuildRole(guildId: DiscordSnowflakeType, body: {name?: string | null, permissions?: number | null, color?: number | null, hoist?: boolean | null, mentionable?: boolean | null, icon?: string | null, unicode_emoji?: string | null}): RequestJson<DiscordGuildRoleResponse> { return new RequestJson<DiscordGuildRoleResponse>(`/guilds/${guildId}/roles`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function bulkUpdateGuildRoles(guildId: DiscordSnowflakeType, body: {id?: (null | DiscordSnowflakeType), position?: number | null}[]): RequestJson<DiscordGuildRoleResponse[]> { return new RequestJson<DiscordGuildRoleResponse[]>(`/guilds/${guildId}/roles`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function getGuildRole(guildId: DiscordSnowflakeType, roleId: DiscordSnowflakeType): RequestJson<DiscordGuildRoleResponse> { return new RequestJson<DiscordGuildRoleResponse>(`/guilds/${guildId}/roles/${roleId}`, RequestMethod.GET); }
   export function deleteGuildRole(guildId: DiscordSnowflakeType, roleId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/roles/${roleId}`, RequestMethod.DELETE); }
   export function updateGuildRole(guildId: DiscordSnowflakeType, roleId: DiscordSnowflakeType, body: {name?: string | null, permissions?: number | null, color?: number | null, hoist?: boolean | null, mentionable?: boolean | null, icon?: string | null, unicode_emoji?: string | null}): RequestJson<DiscordGuildRoleResponse> { return new RequestJson<DiscordGuildRoleResponse>(`/guilds/${guildId}/roles/${roleId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function listGuildScheduledEvents(guildId: DiscordSnowflakeType): RequestJson<(DiscordExternalScheduledEventResponse | DiscordStageScheduledEventResponse | DiscordVoiceScheduledEventResponse)[] | null> { return new RequestJson<(DiscordExternalScheduledEventResponse | DiscordStageScheduledEventResponse | DiscordVoiceScheduledEventResponse)[] | null>(`/guilds/${guildId}/scheduled-events`, RequestMethod.GET); }
   export function createGuildScheduledEvent(guildId: DiscordSnowflakeType, body: (DiscordExternalScheduledEventCreateRequest | DiscordStageScheduledEventCreateRequest | DiscordVoiceScheduledEventCreateRequest)): RequestJson<(DiscordExternalScheduledEventResponse | DiscordStageScheduledEventResponse | DiscordVoiceScheduledEventResponse)> { return new RequestJson<(DiscordExternalScheduledEventResponse | DiscordStageScheduledEventResponse | DiscordVoiceScheduledEventResponse)>(`/guilds/${guildId}/scheduled-events`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getGuildScheduledEvent(guildId: DiscordSnowflakeType, guildScheduledEventId: DiscordSnowflakeType): RequestJson<(DiscordExternalScheduledEventResponse | DiscordStageScheduledEventResponse | DiscordVoiceScheduledEventResponse)> { return new RequestJson<(DiscordExternalScheduledEventResponse | DiscordStageScheduledEventResponse | DiscordVoiceScheduledEventResponse)>(`/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`, RequestMethod.GET); }
   export function deleteGuildScheduledEvent(guildId: DiscordSnowflakeType, guildScheduledEventId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`, RequestMethod.DELETE); }
   export function updateGuildScheduledEvent(guildId: DiscordSnowflakeType, guildScheduledEventId: DiscordSnowflakeType, body: (DiscordExternalScheduledEventPatchRequestPartial | DiscordStageScheduledEventPatchRequestPartial | DiscordVoiceScheduledEventPatchRequestPartial)): RequestJson<(DiscordExternalScheduledEventResponse | DiscordStageScheduledEventResponse | DiscordVoiceScheduledEventResponse)> { return new RequestJson<(DiscordExternalScheduledEventResponse | DiscordStageScheduledEventResponse | DiscordVoiceScheduledEventResponse)>(`/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function listGuildScheduledEventUsers(guildId: DiscordSnowflakeType, guildScheduledEventId: DiscordSnowflakeType): RequestJson<DiscordScheduledEventUserResponse[] | null> { return new RequestJson<DiscordScheduledEventUserResponse[] | null>(`/guilds/${guildId}/scheduled-events/${guildScheduledEventId}/users`, RequestMethod.GET); }
   export function listGuildSoundboardSounds(guildId: DiscordSnowflakeType): RequestJson<DiscordListGuildSoundboardSoundsResponse> { return new RequestJson<DiscordListGuildSoundboardSoundsResponse>(`/guilds/${guildId}/soundboard-sounds`, RequestMethod.GET); }
   export function createGuildSoundboardSound(guildId: DiscordSnowflakeType, body: DiscordSoundboardCreateRequest): RequestJson<DiscordSoundboardSoundResponse> { return new RequestJson<DiscordSoundboardSoundResponse>(`/guilds/${guildId}/soundboard-sounds`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getGuildSoundboardSound(guildId: DiscordSnowflakeType, soundId: DiscordSnowflakeType): RequestJson<DiscordSoundboardSoundResponse> { return new RequestJson<DiscordSoundboardSoundResponse>(`/guilds/${guildId}/soundboard-sounds/${soundId}`, RequestMethod.GET); }
   export function deleteGuildSoundboardSound(guildId: DiscordSnowflakeType, soundId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/soundboard-sounds/${soundId}`, RequestMethod.DELETE); }
   export function updateGuildSoundboardSound(guildId: DiscordSnowflakeType, soundId: DiscordSnowflakeType, body: DiscordSoundboardPatchRequestPartial): RequestJson<DiscordSoundboardSoundResponse> { return new RequestJson<DiscordSoundboardSoundResponse>(`/guilds/${guildId}/soundboard-sounds/${soundId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function listGuildStickers(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildStickerResponse[]> { return new RequestJson<DiscordGuildStickerResponse[]>(`/guilds/${guildId}/stickers`, RequestMethod.GET); }
   export function createGuildSticker(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildStickerResponse> { return new RequestJson<DiscordGuildStickerResponse>(`/guilds/${guildId}/stickers`, RequestMethod.POST); }
   export function getGuildSticker(guildId: DiscordSnowflakeType, stickerId: DiscordSnowflakeType): RequestJson<DiscordGuildStickerResponse> { return new RequestJson<DiscordGuildStickerResponse>(`/guilds/${guildId}/stickers/${stickerId}`, RequestMethod.GET); }
   export function deleteGuildSticker(guildId: DiscordSnowflakeType, stickerId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/stickers/${stickerId}`, RequestMethod.DELETE); }
   export function updateGuildSticker(guildId: DiscordSnowflakeType, stickerId: DiscordSnowflakeType, body: {name?: string, tags?: string, description?: string | null}): RequestJson<DiscordGuildStickerResponse> { return new RequestJson<DiscordGuildStickerResponse>(`/guilds/${guildId}/stickers/${stickerId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function listGuildTemplates(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildTemplateResponse[] | null> { return new RequestJson<DiscordGuildTemplateResponse[] | null>(`/guilds/${guildId}/templates`, RequestMethod.GET); }
   export function createGuildTemplate(guildId: DiscordSnowflakeType, body: {name: string, description?: string | null}): RequestJson<DiscordGuildTemplateResponse> { return new RequestJson<DiscordGuildTemplateResponse>(`/guilds/${guildId}/templates`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function syncGuildTemplate(guildId: DiscordSnowflakeType, code: string): RequestJson<DiscordGuildTemplateResponse> { return new RequestJson<DiscordGuildTemplateResponse>(`/guilds/${guildId}/templates/${code}`, RequestMethod.PUT); }
   export function deleteGuildTemplate(guildId: DiscordSnowflakeType, code: string): RequestJson<DiscordGuildTemplateResponse> { return new RequestJson<DiscordGuildTemplateResponse>(`/guilds/${guildId}/templates/${code}`, RequestMethod.DELETE); }
   export function updateGuildTemplate(guildId: DiscordSnowflakeType, code: string, body: {name?: string, description?: string | null}): RequestJson<DiscordGuildTemplateResponse> { return new RequestJson<DiscordGuildTemplateResponse>(`/guilds/${guildId}/templates/${code}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function getActiveGuildThreads(guildId: DiscordSnowflakeType): RequestJson<DiscordThreadsResponse> { return new RequestJson<DiscordThreadsResponse>(`/guilds/${guildId}/threads/active`, RequestMethod.GET); }
   export function getGuildVanityUrl(guildId: DiscordSnowflakeType): RequestJson<DiscordVanityURLResponse> { return new RequestJson<DiscordVanityURLResponse>(`/guilds/${guildId}/vanity-url`, RequestMethod.GET); }
   export function getSelfVoiceState(guildId: DiscordSnowflakeType): RequestJson<DiscordVoiceStateResponse> { return new RequestJson<DiscordVoiceStateResponse>(`/guilds/${guildId}/voice-states/@me`, RequestMethod.GET); }
   export function updateSelfVoiceState(guildId: DiscordSnowflakeType, body: {request_to_speak_timestamp?: string | null, suppress?: boolean | null, channel_id?: (null | DiscordSnowflakeType)}): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/voice-states/@me`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function getVoiceState(guildId: DiscordSnowflakeType, userId: DiscordSnowflakeType): RequestJson<DiscordVoiceStateResponse> { return new RequestJson<DiscordVoiceStateResponse>(`/guilds/${guildId}/voice-states/${userId}`, RequestMethod.GET); }
   export function updateVoiceState(guildId: DiscordSnowflakeType, userId: DiscordSnowflakeType, body: {suppress?: boolean | null, channel_id?: (null | DiscordSnowflakeType)}): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/voice-states/${userId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function getGuildWebhooks(guildId: DiscordSnowflakeType): RequestJson<(DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)[] | null> { return new RequestJson<(DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)[] | null>(`/guilds/${guildId}/webhooks`, RequestMethod.GET); }
   export function getGuildWelcomeScreen(guildId: DiscordSnowflakeType): RequestJson<DiscordGuildWelcomeScreenResponse> { return new RequestJson<DiscordGuildWelcomeScreenResponse>(`/guilds/${guildId}/welcome-screen`, RequestMethod.GET); }
   export function updateGuildWelcomeScreen(guildId: DiscordSnowflakeType, body: DiscordWelcomeScreenPatchRequestPartial): RequestJson<DiscordGuildWelcomeScreenResponse> { return new RequestJson<DiscordGuildWelcomeScreenResponse>(`/guilds/${guildId}/welcome-screen`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function getGuildWidgetSettings(guildId: DiscordSnowflakeType): RequestJson<DiscordWidgetSettingsResponse> { return new RequestJson<DiscordWidgetSettingsResponse>(`/guilds/${guildId}/widget`, RequestMethod.GET); }
   export function updateGuildWidgetSettings(guildId: DiscordSnowflakeType, body: {channel_id?: (null | DiscordSnowflakeType), enabled?: boolean | null}): RequestJson<DiscordWidgetSettingsResponse> { return new RequestJson<DiscordWidgetSettingsResponse>(`/guilds/${guildId}/widget`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function getGuildWidget(guildId: DiscordSnowflakeType): RequestJson<DiscordWidgetResponse> { return new RequestJson<DiscordWidgetResponse>(`/guilds/${guildId}/widget.json`, RequestMethod.GET); }
   export function getGuildWidgetPng(guildId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/guilds/${guildId}/widget.png`, RequestMethod.GET); }
   export function createInteractionResponse(interactionId: DiscordSnowflakeType, interactionToken: string, body: (DiscordApplicationCommandAutocompleteCallbackRequest | DiscordCreateMessageInteractionCallbackRequest | DiscordLaunchActivityInteractionCallbackRequest | DiscordModalInteractionCallbackRequest | DiscordPongInteractionCallbackRequest | DiscordUpdateMessageInteractionCallbackRequest)): RequestJson<DiscordInteractionCallbackResponse> { return new RequestJson<DiscordInteractionCallbackResponse>(`/interactions/${interactionId}/${interactionToken}/callback`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function inviteResolve(code: string): RequestJson<(DiscordFriendInviteResponse | DiscordGroupDMInviteResponse | DiscordGuildInviteResponse)> { return new RequestJson<(DiscordFriendInviteResponse | DiscordGroupDMInviteResponse | DiscordGuildInviteResponse)>(`/invites/${code}`, RequestMethod.GET); }
   export function inviteRevoke(code: string): RequestJson<(DiscordFriendInviteResponse | DiscordGroupDMInviteResponse | DiscordGuildInviteResponse)> { return new RequestJson<(DiscordFriendInviteResponse | DiscordGroupDMInviteResponse | DiscordGuildInviteResponse)>(`/invites/${code}`, RequestMethod.DELETE); }
   export function createOrJoinLobby(body: {idle_timeout_seconds?: number | null, lobby_metadata?: object | null, member_metadata?: object | null, secret: string}): RequestJson<DiscordLobbyResponse> { return new RequestJson<DiscordLobbyResponse>("/lobbies", RequestMethod.PUT).setBody(stringify(body), "application/json"); }
   export function createLobby(body: {idle_timeout_seconds?: number | null, members?: DiscordLobbyMemberRequest[] | null, metadata?: object | null}): RequestJson<DiscordLobbyResponse> { return new RequestJson<DiscordLobbyResponse>("/lobbies", RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getLobby(lobbyId: DiscordSnowflakeType): RequestJson<DiscordLobbyResponse> { return new RequestJson<DiscordLobbyResponse>(`/lobbies/${lobbyId}`, RequestMethod.GET); }
   export function editLobby(lobbyId: DiscordSnowflakeType, body: {idle_timeout_seconds?: number | null, metadata?: object | null, members?: DiscordLobbyMemberRequest[] | null}): RequestJson<DiscordLobbyResponse> { return new RequestJson<DiscordLobbyResponse>(`/lobbies/${lobbyId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function editLobbyChannelLink(lobbyId: DiscordSnowflakeType, body: {channel_id?: (null | DiscordSnowflakeType)}): RequestJson<DiscordLobbyResponse> { return new RequestJson<DiscordLobbyResponse>(`/lobbies/${lobbyId}/channel-linking`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function leaveLobby(lobbyId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/lobbies/${lobbyId}/members/@me`, RequestMethod.DELETE); }
   export function addLobbyMember(lobbyId: DiscordSnowflakeType, userId: DiscordSnowflakeType, body: {metadata?: object | null, flags?: (null | number)}): RequestJson<DiscordLobbyMemberResponse> { return new RequestJson<DiscordLobbyMemberResponse>(`/lobbies/${lobbyId}/members/${userId}`, RequestMethod.PUT).setBody(stringify(body), "application/json"); }
   export function deleteLobbyMember(lobbyId: DiscordSnowflakeType, userId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/lobbies/${lobbyId}/members/${userId}`, RequestMethod.DELETE); }
   export function createLobbyMessage(lobbyId: DiscordSnowflakeType, body: DiscordSDKMessageRequest): RequestJson<DiscordLobbyMessageResponse> { return new RequestJson<DiscordLobbyMessageResponse>(`/lobbies/${lobbyId}/messages`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getMyOauth2Authorization(): RequestJson<DiscordOAuth2GetAuthorizationResponse> { return new RequestJson<DiscordOAuth2GetAuthorizationResponse>("/oauth2/@me", RequestMethod.GET); }
   export function getMyOauth2Application(): RequestJson<DiscordPrivateApplicationResponse> { return new RequestJson<DiscordPrivateApplicationResponse>("/oauth2/applications/@me", RequestMethod.GET); }
   export function getPublicKeys(): RequestJson<DiscordOAuth2GetKeys> { return new RequestJson<DiscordOAuth2GetKeys>("/oauth2/keys", RequestMethod.GET); }
   export function getOpenidConnectUserinfo(): RequestJson<DiscordOAuth2GetOpenIDConnectUserInfoResponse> { return new RequestJson<DiscordOAuth2GetOpenIDConnectUserInfoResponse>("/oauth2/userinfo", RequestMethod.GET); }
   export function partnerSdkUnmergeProvisionalAccount(body: {client_id: DiscordSnowflakeType, client_secret?: string | null, external_auth_token: string, external_auth_type: DiscordApplicationIdentityProviderAuthType}): RequestJson<void> { return new RequestJson<void>("/partner-sdk/provisional-accounts/unmerge", RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function partnerSdkToken(body: {client_id: DiscordSnowflakeType, client_secret?: string | null, external_auth_token: string, external_auth_type: DiscordApplicationIdentityProviderAuthType}): RequestJson<DiscordProvisionalTokenResponse> { return new RequestJson<DiscordProvisionalTokenResponse>("/partner-sdk/token", RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getSoundboardDefaultSounds(): RequestJson<DiscordSoundboardSoundResponse[]> { return new RequestJson<DiscordSoundboardSoundResponse[]>("/soundboard-default-sounds", RequestMethod.GET); }
   export function createStageInstance(body: {topic: string, channel_id: DiscordSnowflakeType, privacy_level?: (null | DiscordStageInstancesPrivacyLevels), guild_scheduled_event_id?: (null | DiscordSnowflakeType), send_start_notification?: boolean | null}): RequestJson<DiscordStageInstanceResponse> { return new RequestJson<DiscordStageInstanceResponse>("/stage-instances", RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getStageInstance(channelId: DiscordSnowflakeType): RequestJson<DiscordStageInstanceResponse> { return new RequestJson<DiscordStageInstanceResponse>(`/stage-instances/${channelId}`, RequestMethod.GET); }
   export function deleteStageInstance(channelId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/stage-instances/${channelId}`, RequestMethod.DELETE); }
   export function updateStageInstance(channelId: DiscordSnowflakeType, body: {topic?: string, privacy_level?: DiscordStageInstancesPrivacyLevels}): RequestJson<DiscordStageInstanceResponse> { return new RequestJson<DiscordStageInstanceResponse>(`/stage-instances/${channelId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function listStickerPacks(): RequestJson<DiscordStickerPackCollectionResponse> { return new RequestJson<DiscordStickerPackCollectionResponse>("/sticker-packs", RequestMethod.GET); }
   export function getStickerPack(packId: DiscordSnowflakeType): RequestJson<DiscordStickerPackResponse> { return new RequestJson<DiscordStickerPackResponse>(`/sticker-packs/${packId}`, RequestMethod.GET); }
   export function getSticker(stickerId: DiscordSnowflakeType): RequestJson<(DiscordGuildStickerResponse | DiscordStandardStickerResponse)> { return new RequestJson<(DiscordGuildStickerResponse | DiscordStandardStickerResponse)>(`/stickers/${stickerId}`, RequestMethod.GET); }
   export function getMyUser(): RequestJson<DiscordUserPIIResponse> { return new RequestJson<DiscordUserPIIResponse>("/users/@me", RequestMethod.GET); }
   export function updateMyUser(body: DiscordBotAccountPatchRequest): RequestJson<DiscordUserPIIResponse> { return new RequestJson<DiscordUserPIIResponse>("/users/@me", RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function getApplicationUserRoleConnection(applicationId: DiscordSnowflakeType): RequestJson<DiscordApplicationUserRoleConnectionResponse> { return new RequestJson<DiscordApplicationUserRoleConnectionResponse>(`/users/@me/applications/${applicationId}/role-connection`, RequestMethod.GET); }
   export function updateApplicationUserRoleConnection(applicationId: DiscordSnowflakeType, body: {platform_name?: string | null, platform_username?: string | null, metadata?: object | null}): RequestJson<DiscordApplicationUserRoleConnectionResponse> { return new RequestJson<DiscordApplicationUserRoleConnectionResponse>(`/users/@me/applications/${applicationId}/role-connection`, RequestMethod.PUT).setBody(stringify(body), "application/json"); }
   export function deleteApplicationUserRoleConnection(applicationId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/users/@me/applications/${applicationId}/role-connection`, RequestMethod.DELETE); }
   export function createDm(body: DiscordCreatePrivateChannelRequest): RequestJson<(DiscordPrivateChannelResponse | DiscordPrivateGroupChannelResponse)> { return new RequestJson<(DiscordPrivateChannelResponse | DiscordPrivateGroupChannelResponse)>("/users/@me/channels", RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function listMyConnections(): RequestJson<DiscordConnectedAccountResponse[] | null> { return new RequestJson<DiscordConnectedAccountResponse[] | null>("/users/@me/connections", RequestMethod.GET); }
   export function listMyGuilds(): RequestJson<DiscordMyGuildResponse[] | null> { return new RequestJson<DiscordMyGuildResponse[] | null>("/users/@me/guilds", RequestMethod.GET); }
   export function leaveGuild(guildId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/users/@me/guilds/${guildId}`, RequestMethod.DELETE); }
   export function getMyGuildMember(guildId: DiscordSnowflakeType): RequestJson<DiscordPrivateGuildMemberResponse> { return new RequestJson<DiscordPrivateGuildMemberResponse>(`/users/@me/guilds/${guildId}/member`, RequestMethod.GET); }
   export function getUser(userId: DiscordSnowflakeType): RequestJson<DiscordUserResponse> { return new RequestJson<DiscordUserResponse>(`/users/${userId}`, RequestMethod.GET); }
   export function listVoiceRegions(): RequestJson<DiscordVoiceRegionResponse[] | null> { return new RequestJson<DiscordVoiceRegionResponse[] | null>("/voice/regions", RequestMethod.GET); }
   export function getWebhook(webhookId: DiscordSnowflakeType): RequestJson<(DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)> { return new RequestJson<(DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)>(`/webhooks/${webhookId}`, RequestMethod.GET); }
   export function deleteWebhook(webhookId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/webhooks/${webhookId}`, RequestMethod.DELETE); }
   export function updateWebhook(webhookId: DiscordSnowflakeType, body: {name?: string, avatar?: string | null, channel_id?: (null | DiscordSnowflakeType)}): RequestJson<(DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)> { return new RequestJson<(DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)>(`/webhooks/${webhookId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function getWebhookByToken(webhookId: DiscordSnowflakeType, webhookToken: string): RequestJson<(DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)> { return new RequestJson<(DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)>(`/webhooks/${webhookId}/${webhookToken}`, RequestMethod.GET); }
   export function executeWebhook(webhookId: DiscordSnowflakeType, webhookToken: string, body: (DiscordIncomingWebhookRequestPartial | DiscordIncomingWebhookUpdateRequestPartial)): RequestJson<DiscordMessageResponse> { return new RequestJson<DiscordMessageResponse>(`/webhooks/${webhookId}/${webhookToken}`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function deleteWebhookByToken(webhookId: DiscordSnowflakeType, webhookToken: string): RequestJson<void> { return new RequestJson<void>(`/webhooks/${webhookId}/${webhookToken}`, RequestMethod.DELETE); }
   export function updateWebhookByToken(webhookId: DiscordSnowflakeType, webhookToken: string, body: {name?: string, avatar?: string | null}): RequestJson<(DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)> { return new RequestJson<(DiscordApplicationIncomingWebhookResponse | DiscordChannelFollowerWebhookResponse | DiscordGuildIncomingWebhookResponse)>(`/webhooks/${webhookId}/${webhookToken}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function executeGithubCompatibleWebhook(webhookId: DiscordSnowflakeType, webhookToken: string, body: DiscordGithubWebhook): RequestJson<void> { return new RequestJson<void>(`/webhooks/${webhookId}/${webhookToken}/github`, RequestMethod.POST).setBody(stringify(body), "application/json"); }
   export function getOriginalWebhookMessage(webhookId: DiscordSnowflakeType, webhookToken: string): RequestJson<DiscordMessageResponse> { return new RequestJson<DiscordMessageResponse>(`/webhooks/${webhookId}/${webhookToken}/messages/@original`, RequestMethod.GET); }
   export function deleteOriginalWebhookMessage(webhookId: DiscordSnowflakeType, webhookToken: string): RequestJson<void> { return new RequestJson<void>(`/webhooks/${webhookId}/${webhookToken}/messages/@original`, RequestMethod.DELETE); }
   export function updateOriginalWebhookMessage(webhookId: DiscordSnowflakeType, webhookToken: string, body: DiscordIncomingWebhookUpdateRequestPartial): RequestJson<DiscordMessageResponse> { return new RequestJson<DiscordMessageResponse>(`/webhooks/${webhookId}/${webhookToken}/messages/@original`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function getWebhookMessage(webhookId: DiscordSnowflakeType, webhookToken: string, messageId: DiscordSnowflakeType): RequestJson<DiscordMessageResponse> { return new RequestJson<DiscordMessageResponse>(`/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`, RequestMethod.GET); }
   export function deleteWebhookMessage(webhookId: DiscordSnowflakeType, webhookToken: string, messageId: DiscordSnowflakeType): RequestJson<void> { return new RequestJson<void>(`/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`, RequestMethod.DELETE); }
   export function updateWebhookMessage(webhookId: DiscordSnowflakeType, webhookToken: string, messageId: DiscordSnowflakeType, body: DiscordIncomingWebhookUpdateRequestPartial): RequestJson<DiscordMessageResponse> { return new RequestJson<DiscordMessageResponse>(`/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`, RequestMethod.PATCH).setBody(stringify(body), "application/json"); }
   export function executeSlackCompatibleWebhook(webhookId: DiscordSnowflakeType, webhookToken: string, body: DiscordSlackWebhook): RequestJson<string | null> { return new RequestJson<string | null>(`/webhooks/${webhookId}/${webhookToken}/slack`, RequestMethod.POST).setBody(stringify(body), "application/json"); }

}